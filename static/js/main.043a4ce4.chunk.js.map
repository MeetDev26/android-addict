{"version":3,"sources":["config/constant.js","Allcode/Permission/Single_permission.js","Allcode/Permission/Multiple_permission.js","Allcode/Dialog/Dialog.js","Allcode/DisplayInstalledApps/InstalledApps.js","Allcode/Theme/APPTheme.js","Allcode/Date and Time Picker/SimpleDatePicker.js","Allcode/Date and Time Picker/MaterialDatePicker.js","Allcode/Date and Time Picker/SimpleTimePicker.js","Allcode/Date and Time Picker/MaterialTimePicker.js","Allcode/DownloadFile/DownloadAnyFile.js","Allcode/Share Copy and Paste text/SCP.js","Allcode/Search/SearchBarWithMenu.js","Components/Home.js","Components/NavBar.js","Components/SideBar.js","Components/OneComponetSC.js","Components/Sourcecode.js","App.js","index.js"],"names":["require","permissionMainfestsXml","singlePermissionXMl","singlePermissionKt","permissionMethod","permissionStr","multiplAndroidManinfestXml","multipleActivtyXMl","multipleString","multiplePermissionMethod","multiplePermissionActivity","dialogActivtyXMl","layout_progress","progressActivityKt","layout_loading","loadingActivityKt","alertActivityKt","materialAlertActivityKt","materialThemeDialogActivityKt","customeDialogActivityKt","installedActivityXML","layout_installed_apps","installedLayoutLoadingXml","installedString","search_menuXml","appModel","appAdapter","installedActivityKt","ThemeColorXML","ThemeLightXML","ThemeDarkXML","ThemeActiviyMainXML","ThemeMainActivityKt","ThemeSplashXML","ThemeSplashActivityKt","ThemeAndroidMainfest","SimpleDatePickerActivityXMl","SimpleDatePickerActivityKT","MaterialDatePickerActivityXMl","MaterialDatePickerActivityKT","SimpleTimePickerActivityXMl","SimpleTimePickerActivityKT","MaterialTimePickerActivityXMl","MaterialTimePickerActivityKT","DownloadAndroidMainfestXMl","DownloadMainActivityXML","DownloadMainActivityKT","SCPMainActivityXML","SCPMainActivityKT","SBMActivityXML","item_layout","item_model","item_adapter","SBMActivityKIT","androidManifestXML","stringXML","XML","KT","activity_main","MainActivity","sourceCodeList","id","type","typeId","typeName","subs","component_name","path","description","youtube_short_url","youtube_url","fileName","fileType","fileCode","SBMenuXML","module","exports","Home","componentBlock","element","index","className","to","map","elements","indexs","NavBar","props","location","useLocation","useState","filteredData","setFilteredData","wordEntered","setWordEntered","clearInput","style","backgroundColor","color","fontSize","onClick","showSidebar","float","placeholder","value","onChange","event","searchWord","target","listD","forEach","push","newFilter","filter","toLowerCase","includes","length","position","width","key","pathname","SideBar","height","zIndex","overflowX","paddingBottom","listStyle","class","OneComponetSC","Pre","styled","pre","Line","div","LineNo","span","LineContent","defaultProps","theme","dracula","code","language","tokens","getLineProps","getTokenProps","navigator","clipboard","writeText","line","i","token","Sourcecode","window","scrollTo","title","src","frameBorder","allow","allowFullScreen","App","sidebar","setSidebar","basename","exact","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.043a4ce4.chunk.js","sourcesContent":["const {\r\n    permissionMainfestsXml,\r\n    singlePermissionXMl,\r\n    singlePermissionKt,\r\n    permissionMethod,\r\n    permissionStr,\r\n} = require(\"../Allcode/Permission/Single_permission\");\r\nconst {\r\n    multiplAndroidManinfestXml,\r\n    multipleActivtyXMl,\r\n    multipleString,\r\n    multiplePermissionMethod,\r\n    multiplePermissionActivity,\r\n} = require(\"../Allcode/Permission/Multiple_permission\");\r\nconst {\r\n    dialogActivtyXMl,\r\n    layout_progress,\r\n    progressActivityKt,\r\n    layout_loading,\r\n    loadingActivityKt,\r\n    alertActivityKt,\r\n    materialAlertActivityKt,\r\n    materialThemeDialogActivityKt,\r\n    customeDialogActivityKt,\r\n} = require(\"../Allcode/Dialog/Dialog\");\r\nconst {\r\n    installedActivityXML,\r\n    layout_installed_apps,\r\n    installedLayoutLoadingXml,\r\n    installedString,\r\n    search_menuXml,\r\n    appModel,\r\n    appAdapter,\r\n    installedActivityKt,\r\n} = require(\"../Allcode/DisplayInstalledApps/InstalledApps\");\r\nconst {\r\n    ThemeColorXML,\r\n    ThemeLightXML,\r\n    ThemeDarkXML,\r\n    ThemeActiviyMainXML,\r\n    ThemeMainActivityKt,\r\n    ThemeSplashXML,\r\n    ThemeSplashActivityKt,\r\n    ThemeAndroidMainfest,\r\n} = require(\"../Allcode/Theme/APPTheme\");\r\nconst {\r\n    SimpleDatePickerActivityXMl,\r\n    SimpleDatePickerActivityKT,\r\n} = require(\"../Allcode/Date and Time Picker/SimpleDatePicker\");\r\nconst {\r\n    MaterialDatePickerActivityXMl,\r\n    MaterialDatePickerActivityKT,\r\n} = require(\"../Allcode/Date and Time Picker/MaterialDatePicker\");\r\nconst {\r\n    SimpleTimePickerActivityXMl,\r\n    SimpleTimePickerActivityKT,\r\n} = require(\"../Allcode/Date and Time Picker/SimpleTimePicker\");\r\nconst {\r\n    MaterialTimePickerActivityXMl,\r\n    MaterialTimePickerActivityKT,\r\n} = require(\"../Allcode/Date and Time Picker/MaterialTimePicker\");\r\nconst {\r\n    DownloadAndroidMainfestXMl,\r\n    DownloadMainActivityXML,\r\n    DownloadMainActivityKT,\r\n} = require(\"../Allcode/DownloadFile/DownloadAnyFile\");\r\nconst {\r\n    SCPMainActivityXML,\r\n    SCPMainActivityKT,\r\n} = require(\"../Allcode/Share Copy and Paste text/SCP\");\r\nconst {\r\n    SBMActivityXML,\r\n    item_layout,\r\n    item_model,\r\n    item_adapter,\r\n    SBMActivityKIT,\r\n    SBMenuXML,\r\n} = require(\"../Allcode/Search/SearchBarWithMenu\");\r\n\r\nconst androidManifestXML = \"AndroidManifest.xml\";\r\nconst stringXML = \"string.xml\";\r\nconst XML = \"xml\";\r\nconst KT = \"jsx\";\r\nconst colorXMl = \"color.xml\";\r\nconst activity_main = \"activity_main.xml\";\r\nconst MainActivity = \"MainActivity.kt\";\r\n\r\nconst sourceCodeList = [\r\n    {\r\n        id: \"1\",\r\n        type: true,\r\n        typeId: \"permission\",\r\n        typeName: \"Permission\",\r\n        subs: [\r\n            {\r\n                id: \"1\",\r\n                component_name: \"Single Run-time Pemission\",\r\n                path: \"/single-run-time-permission\",\r\n                description:\r\n                    \"Runtime permissions give your app additional access to restricted data, and they allow your app to perform restricted actions that more substantially affect the system and other apps.Many runtime permissions access private user data, a special type of restricted data that includes potentially sensitive information. Examples of private user data include location and contact information. \",\r\n                youtube_short_url: null,\r\n                youtube_url: null,\r\n                fileName: [\r\n                    androidManifestXML,\r\n                    activity_main,\r\n                    stringXML,\r\n                    \"Permission.kt\",\r\n                    MainActivity,\r\n                ],\r\n                fileType: [XML, XML, XML, KT, KT],\r\n                fileCode: [\r\n                    permissionMainfestsXml,\r\n                    singlePermissionXMl,\r\n                    permissionStr,\r\n                    permissionMethod,\r\n                    singlePermissionKt,\r\n                ],\r\n            },\r\n            {\r\n                id: \"2\",\r\n                component_name: \"Multiple Run-time Permission\",\r\n                path: \"/multiple-run-time-permission\",\r\n                description: \"To request Multiple Runtime Permissions in our application. This type of request can be made through various types of application who wanted to access different type of content after accessing user permission.\",\r\n                youtube_short_url: null,\r\n                youtube_url: null,\r\n                fileName: [\r\n                    androidManifestXML,\r\n                    activity_main,\r\n                    stringXML,\r\n                    \"Permission.kt\",\r\n                    MainActivity,\r\n                ],\r\n                fileType: [XML, XML, XML, KT, KT],\r\n                fileCode: [\r\n                    multiplAndroidManinfestXml,\r\n                    multipleActivtyXMl,\r\n                    multipleString,\r\n                    multiplePermissionMethod,\r\n                    multiplePermissionActivity,\r\n                ],\r\n            },\r\n        ],\r\n    },\r\n    {\r\n        id: \"2\",\r\n        type: true,\r\n        typeId: \"dialog\",\r\n        typeName: \"Dialog\",\r\n        subs: [\r\n            {\r\n                id: \"1\",\r\n                component_name: \"Progress Dialog\",\r\n                path: \"/progress-dialog\",\r\n                description: \"A dialog showing a progress indicator and an optional text message or view. Only a text message or a view can be used at the same time.\",\r\n                youtube_short_url: null,\r\n                youtube_url: null,\r\n                fileName: [activity_main, \"layout_progress.xml\", MainActivity],\r\n                fileType: [XML, XML, KT],\r\n                fileCode: [dialogActivtyXMl, layout_progress, progressActivityKt],\r\n            },\r\n            {\r\n                id: \"2\",\r\n                component_name: \"Loading Dialog\",\r\n                path: \"/loading-dialog\",\r\n                description: \"A dialog showing a progress indicator and an optional text message or view. Only a text message or a view can be used at the same time.\",\r\n                youtube_short_url: null,\r\n                youtube_url: null,\r\n                fileName: [activity_main, \"layout_loading.xml\", MainActivity],\r\n                fileType: [XML, XML, KT],\r\n                fileCode: [dialogActivtyXMl, layout_loading, loadingActivityKt],\r\n            },\r\n            {\r\n                id: \"3\",\r\n                component_name: \"Alert Dialog\",\r\n                path: \"/alert-dialog\",\r\n                description: \"AlertDialog can be used to display the dialog message with OK and Cancel buttons. It can be used to interrupt and ask the user about his/her choice to continue or discontinue.\",\r\n                youtube_short_url: null,\r\n                youtube_url: null,\r\n                fileName: [activity_main, MainActivity],\r\n                fileType: [XML, KT],\r\n                fileCode: [dialogActivtyXMl, alertActivityKt],\r\n            },\r\n            {\r\n                id: \"4\",\r\n                component_name: \"Material Alert Dialog\",\r\n                path: \"/material-alert-dialog\",\r\n                description: \"Material Alert Dialog can be used to display the dialog message with OK and Cancel buttons. It can be used to interrupt and ask the user about his/her choice to continue or discontinue.\",\r\n                youtube_short_url: null,\r\n                youtube_url: null,\r\n                fileName: [activity_main, MainActivity],\r\n                fileType: [XML, KT],\r\n                fileCode: [dialogActivtyXMl, materialAlertActivityKt],\r\n            },\r\n            {\r\n                id: \"5\",\r\n                component_name: \"Material Theme Dialog\",\r\n                path: \"/material-theme-dialog\",\r\n                description: \"Material Theme Dialog with the Single Item Selectio\",\r\n                youtube_short_url: null,\r\n                youtube_url: null,\r\n                fileName: [activity_main, MainActivity],\r\n                fileType: [XML, KT],\r\n                fileCode: [dialogActivtyXMl, materialThemeDialogActivityKt],\r\n            },\r\n            {\r\n                id: \"6\",\r\n                component_name: \"Custom Dialog\",\r\n                path: \"/custom-dialog\",\r\n                description: \"The custom layout fills the dialog.\",\r\n                youtube_short_url: null,\r\n                youtube_url: null,\r\n                fileName: [activity_main, MainActivity],\r\n                fileType: [XML, KT],\r\n                fileCode: [dialogActivtyXMl, customeDialogActivityKt],\r\n            },\r\n        ],\r\n    },\r\n    {\r\n        id: \"3\",\r\n        type: false,\r\n        component_name: \"Display Installed Apps\",\r\n        path: \"/display-installed-apps\",\r\n        description: \"display all installed android applications and pick one to run and open app info.\",\r\n        youtube_short_url: null,\r\n        youtube_url: null,\r\n        fileName: [\r\n            activity_main,\r\n            \"layout_installed_app.xml\",\r\n            stringXML,\r\n            \"layout_loading.xml\",\r\n            \"search_menu.xml\",\r\n            \"AppModel.kt\",\r\n            \"AppAdapter.kt\",\r\n            MainActivity,\r\n        ],\r\n        fileType: [XML, XML, XML, XML, XML, KT, KT, KT],\r\n        fileCode: [\r\n            installedActivityXML,\r\n            layout_installed_apps,\r\n            installedLayoutLoadingXml,\r\n            installedString,\r\n            search_menuXml,\r\n            appModel,\r\n            appAdapter,\r\n            installedActivityKt,\r\n        ],\r\n    },\r\n    {\r\n        id: \"4\",\r\n        type: false,\r\n        component_name: \"Theme\",\r\n        path: \"/theme\",\r\n        description: \"Set light and dark theme using shared Preferences\",\r\n        youtube_short_url: null,\r\n        youtube_url: null,\r\n        fileName: [\r\n            colorXMl,\r\n            \"themes.xml(light)\",\r\n            \"themes.xml(night)\",\r\n            activity_main,\r\n            MainActivity,\r\n            \"activity_splash.xml\",\r\n            \"SplashActivity.kt\",\r\n            androidManifestXML,\r\n        ],\r\n        fileType: [XML, XML, XML, XML, KT, XML, KT, XML],\r\n        fileCode: [\r\n            ThemeColorXML,\r\n            ThemeLightXML,\r\n            ThemeDarkXML,\r\n            ThemeActiviyMainXML,\r\n            ThemeMainActivityKt,\r\n            ThemeSplashXML,\r\n            ThemeSplashActivityKt,\r\n            ThemeAndroidMainfest,\r\n        ],\r\n    },\r\n    {\r\n        id: \"5\",\r\n        type: true,\r\n        typeId: \"datePicker\",\r\n        typeName: \"Date Picker\",\r\n        subs: [\r\n            {\r\n                id: \"1\",\r\n                component_name: \"Simple Date Picker\",\r\n                path: \"/simple-date-picker\",\r\n                description: \"Simple Date Picker is to select a date from a calendar\",\r\n                youtube_short_url: null,\r\n                youtube_url: null,\r\n                fileName: [activity_main, MainActivity],\r\n                fileType: [XML, KT],\r\n                fileCode: [SimpleDatePickerActivityXMl, SimpleDatePickerActivityKT],\r\n            },\r\n            {\r\n                id: \"2\",\r\n                component_name: \"Material Date Picker\",\r\n                path: \"/material-date-picker\",\r\n                description: \"Material Date Picker is to select a date from a calendar\",\r\n                youtube_short_url: null,\r\n                youtube_url: null,\r\n                fileName: [activity_main, MainActivity],\r\n                fileType: [XML, KT],\r\n                fileCode: [MaterialDatePickerActivityXMl, MaterialDatePickerActivityKT],\r\n            },\r\n        ],\r\n    },\r\n    {\r\n        id: \"6\",\r\n        type: true,\r\n        typeId: \"timePicker\",\r\n        typeName: \"Time Picker\",\r\n        subs: [\r\n            {\r\n                id: \"1\",\r\n                component_name: \"Simple Time Picker\",\r\n                path: \"/simple-time-picker\",\r\n                description: \"Simple Time picker allow users to enter a specific time value.\",\r\n                youtube_short_url: null,\r\n                youtube_url: null,\r\n                fileName: [activity_main, MainActivity],\r\n                fileType: [XML, KT],\r\n                fileCode: [SimpleTimePickerActivityXMl, SimpleTimePickerActivityKT],\r\n            },\r\n            {\r\n                id: \"2\",\r\n                component_name: \"Material Time Picker\",\r\n                path: \"/material-time-picker\",\r\n                description: \"Material Time picker allow users to enter a specific time value.\",\r\n                youtube_short_url: null,\r\n                youtube_url: null,\r\n                fileName: [activity_main, MainActivity],\r\n                fileType: [XML, KT],\r\n                fileCode: [MaterialTimePickerActivityXMl, MaterialTimePickerActivityKT],\r\n            },\r\n        ],\r\n    },\r\n    {\r\n        id: \"7\",\r\n        type: false,\r\n        component_name: \"Download File\",\r\n        path: \"/download-file\",\r\n        description: \"Download any file form url.\",\r\n        youtube_short_url: null,\r\n        youtube_url: null,\r\n        fileName: [androidManifestXML, activity_main, MainActivity],\r\n        fileType: [XML, XML, KT],\r\n        fileCode: [\r\n            DownloadAndroidMainfestXMl,\r\n            DownloadMainActivityXML,\r\n            DownloadMainActivityKT,\r\n        ],\r\n    },\r\n    {\r\n        id: \"8\",\r\n        type: false,\r\n        component_name: \"Share, Copy & Paste Text\",\r\n        path: \"/share-copy-paste-text\",\r\n        description: \"Share is used when sending data to another app. Android provides a powerful clipboard-based framework for copying and pasting\",\r\n        youtube_short_url: null,\r\n        youtube_url: null,\r\n        fileName: [activity_main, MainActivity],\r\n        fileType: [XML, KT],\r\n        fileCode: [SCPMainActivityXML, SCPMainActivityKT],\r\n    },\r\n    {\r\n        id: \"9\",\r\n        type: false,\r\n        component_name: \"Search Bar With Menu\",\r\n        path: \"/search-bar-with-menu\",\r\n        description: \"search functionality with default ActionBar.\",\r\n        youtube_short_url: null,\r\n        youtube_url: null,\r\n        fileName: [\r\n            activity_main,\r\n            \"search_menu.xml\",\r\n            \"item_layout.xml\",\r\n            \"ItemModel.kt\",\r\n            \"ItemAdapter.kt\",\r\n            MainActivity,\r\n        ],\r\n        fileType: [XML, XML, XML, KT, KT, KT],\r\n        fileCode: [\r\n            SBMActivityXML,\r\n            SBMenuXML,\r\n            item_layout,\r\n            item_model,\r\n            item_adapter,\r\n            SBMActivityKIT,\r\n        ],\r\n    },\r\n];\r\n\r\nmodule.exports = { sourceCodeList: sourceCodeList };\r\n","const permissionMainfestsXml =\r\n    `<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\r\n    package=\"com.example\">\r\n    <uses-permission android:name=\"android.permission.READ_CONTACTS\" />\r\n    <application\r\n        android:allowBackup=\"true\"\r\n        android:icon=\"@mipmap/ic_launcher\"\r\n        android:label=\"@string/app_name\"\r\n        android:roundIcon=\"@mipmap/ic_launcher_round\"\r\n        android:supportsRtl=\"true\"\r\n        android:theme=\"@style/Theme.AllExample\">\r\n        <activity\r\n            android:name=\".MainActivity\"\r\n            android:exported=\"true\">\r\n            <intent-filter>\r\n                <action android:name=\"android.intent.action.MAIN\" />\r\n\r\n                <category android:name=\"android.intent.category.LAUNCHER\" />\r\n            </intent-filter>\r\n        </activity>\r\n    </application>\r\n\r\n</manifest>`\r\nconst singlePermissionXMl =\r\n    `<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<androidx.constraintlayout.widget.ConstraintLayout \r\n    xmlns:android=\"http://schemas.android.com/apk/res/android\"\r\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\r\n    xmlns:tools=\"http://schemas.android.com/tools\"\r\n    android:layout_width=\"match_parent\"\r\n    android:layout_height=\"match_parent\"\r\n    tools:context=\".MainActivity\">\r\n\r\n    <Button\r\n        android:id=\"@+id/permissionBtn\"\r\n        android:layout_width=\"wrap_content\"\r\n        android:layout_height=\"wrap_content\"\r\n        android:text=\"@string/permission\"\r\n        app:layout_constraintBottom_toBottomOf=\"parent\"\r\n        app:layout_constraintLeft_toLeftOf=\"parent\"\r\n        app:layout_constraintRight_toRightOf=\"parent\"\r\n        app:layout_constraintTop_toTopOf=\"parent\" />\r\n\r\n</androidx.constraintlayout.widget.ConstraintLayout>`\r\n\r\nconst permissionMethod =\r\n    `package com.example\r\n\r\nimport android.app.Activity\r\nimport android.content.DialogInterface\r\nimport android.content.Intent\r\nimport android.content.pm.PackageManager\r\nimport android.net.Uri\r\nimport android.provider.Settings\r\nimport android.widget.Toast\r\nimport androidx.core.app.ActivityCompat\r\nimport androidx.core.content.ContextCompat\r\nimport com.google.android.material.dialog.MaterialAlertDialogBuilder\r\n\r\nobject Permission {\r\n    fun checkSinglePermission(\r\n        activity: Activity,\r\n        permission: String,\r\n        permissionCode: Int\r\n    ): Boolean {\r\n        if (ContextCompat.checkSelfPermission(\r\n                activity,\r\n                permission\r\n            ) == PackageManager.PERMISSION_DENIED\r\n        ) {\r\n            ActivityCompat.requestPermissions(\r\n                activity,\r\n                arrayOf(permission),\r\n                permissionCode\r\n            )\r\n        } else {\r\n            return true\r\n        }\r\n        return false\r\n    }\r\n\r\n    fun settingActivityOpen(activity: Activity) {\r\n        Toast.makeText(\r\n            activity,\r\n            \"Go to settings and enable permissions\",\r\n            Toast.LENGTH_LONG\r\n        )\r\n            .show()\r\n        val i = Intent()\r\n        i.action = Settings.ACTION_APPLICATION_DETAILS_SETTINGS\r\n        i.addCategory(Intent.CATEGORY_DEFAULT)\r\n        val packageName= activity.packageName\r\n        i.data = Uri.parse(\"package:$packageName\")\r\n        i.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK)\r\n        i.addFlags(Intent.FLAG_ACTIVITY_NO_HISTORY)\r\n        i.addFlags(Intent.FLAG_ACTIVITY_EXCLUDE_FROM_RECENTS)\r\n        activity.startActivity(i)\r\n    }\r\n\r\n    fun showDialogOK(activity: Activity,okListener: DialogInterface.OnClickListener) {\r\n        MaterialAlertDialogBuilder(activity)\r\n            .setMessage(\"Permission is required for this app\")\r\n            .setPositiveButton(\"OK\", okListener)\r\n            .setNegativeButton(\"Cancel\", okListener)\r\n            .create()\r\n            .show()\r\n    }\r\n}`\r\nconst singlePermissionKt =\r\n    `package com.example\r\nimport android.Manifest\r\nimport android.content.DialogInterface\r\nimport android.content.pm.PackageManager\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport android.os.Bundle\r\nimport android.widget.Button\r\nimport android.widget.Toast\r\nimport androidx.core.app.ActivityCompat\r\nimport com.example.Permission.checkPermissionAny\r\nimport com.example.Permission.settingActivityOpen\r\nimport com.example.Permission.showDialogOK\r\n\r\nclass MainActivity : AppCompatActivity() {\r\n    private val permissionRequestId = 1\r\n    private val permissionRequestN = Manifest.permission.READ_CONTACTS\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        setContentView(R.layout.activity_main)\r\n        findViewById<Button>(R.id.permissionBtn).setOnClickListener {\r\n            if (checkPermissionAny(\r\n                    this,\r\n                    permissionRequestN,\r\n                    permissionRequestId\r\n                )\r\n            ) {\r\n                doOperation()\r\n            }\r\n        }\r\n    }\r\n\r\n    override fun onRequestPermissionsResult(\r\n        requestCode: Int,\r\n        permissions: Array<out String>,\r\n        grantResults: IntArray\r\n    ) {\r\n        super.onRequestPermissionsResult(requestCode, permissions, grantResults)\r\n        if (requestCode == permissionRequestId) {\r\n            if (grantResults.isNotEmpty() && grantResults[0] == PackageManager.PERMISSION_GRANTED) {\r\n                doOperation()\r\n            } else {\r\n                if (!ActivityCompat.shouldShowRequestPermissionRationale(\r\n                        this,\r\n                        permissionRequestN\r\n                    )\r\n                ) {\r\n                    if (ActivityCompat.checkSelfPermission(\r\n                            this,\r\n                            permissionRequestN\r\n                        ) == PackageManager.PERMISSION_DENIED\r\n                    ) {\r\n                        settingActivityOpen(this)\r\n                    }\r\n                } else {\r\n                    showDialogOK(this) { _: DialogInterface?, which: Int ->\r\n                        when (which) {\r\n                            DialogInterface.BUTTON_POSITIVE -> {\r\n                                if (checkPermissionAny(\r\n                                        this,\r\n                                        permissionRequestN,\r\n                                        permissionRequestId\r\n                                    )\r\n                                ) {\r\n                                    doOperation()\r\n                                }\r\n                            }\r\n                            DialogInterface.BUTTON_NEGATIVE -> {\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private fun doOperation() {\r\n        Toast.makeText(this,\"Successfully\",Toast.LENGTH_LONG).show()\r\n    }\r\n}`\r\nconst permissionStr =\r\n    `<resources>\r\n    <string name=\"app_name\">Run-time Permission</string>\r\n    <string name=\"permission\">Permission</string>\r\n</resources>`\r\nmodule.exports = { permissionMainfestsXml: permissionMainfestsXml, singlePermissionXMl: singlePermissionXMl, permissionStr: permissionStr, permissionMethod: permissionMethod, singlePermissionKt: singlePermissionKt };","const multiplAndroidManinfestXml =\r\n    `<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\r\n    package=\"com.example\">\r\n    <uses-permission android:name=\"android.permission.CAMERA\" />\r\n    <uses-permission android:name=\"android.permission.READ_CONTACTS\" />\r\n    <application\r\n        android:allowBackup=\"true\"\r\n        android:icon=\"@mipmap/ic_launcher\"\r\n        android:label=\"@string/app_name\"\r\n        android:roundIcon=\"@mipmap/ic_launcher_round\"\r\n        android:supportsRtl=\"true\"\r\n        android:theme=\"@style/Theme.AllExample\">\r\n        <activity\r\n            android:name=\".MainActivity\"\r\n            android:exported=\"true\">\r\n            <intent-filter>\r\n                <action android:name=\"android.intent.action.MAIN\" />\r\n\r\n                <category android:name=\"android.intent.category.LAUNCHER\" />\r\n            </intent-filter>\r\n        </activity>\r\n    </application>\r\n\r\n</manifest>`;\r\n\r\nconst multipleActivtyXMl =\r\n    `<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<androidx.constraintlayout.widget.ConstraintLayout \r\n    xmlns:android=\"http://schemas.android.com/apk/res/android\"\r\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\r\n    xmlns:tools=\"http://schemas.android.com/tools\"\r\n    android:layout_width=\"match_parent\"\r\n    android:layout_height=\"match_parent\"\r\n    tools:context=\".MainActivity\">\r\n\r\n    <Button\r\n        android:id=\"@+id/permissionBtn\"\r\n        android:layout_width=\"wrap_content\"\r\n        android:layout_height=\"wrap_content\"\r\n        android:text=\"@string/permission\"\r\n        app:layout_constraintBottom_toBottomOf=\"parent\"\r\n        app:layout_constraintLeft_toLeftOf=\"parent\"\r\n        app:layout_constraintRight_toRightOf=\"parent\"\r\n        app:layout_constraintTop_toTopOf=\"parent\" />\r\n\r\n</androidx.constraintlayout.widget.ConstraintLayout>`\r\n\r\nconst multipleString =\r\n    `<resources>\r\n    <string name=\"app_name\">Multiple Run-time Permission</string>\r\n    <string name=\"permission\">Permission</string>\r\n</resources>`\r\nconst multiplePermissionMethod =\r\n    `package com.example\r\n\r\nimport android.app.Activity\r\nimport android.content.DialogInterface\r\nimport android.content.Intent\r\nimport android.net.Uri\r\nimport android.provider.Settings\r\nimport android.widget.Toast\r\nimport com.google.android.material.dialog.MaterialAlertDialogBuilder\r\n\r\nobject Permission {\r\n\r\n    fun settingActivityOpen(activity: Activity) {\r\n        Toast.makeText(\r\n            activity,\r\n            \"Go to settings and enable permissions\",\r\n            Toast.LENGTH_LONG\r\n        )\r\n            .show()\r\n        val i = Intent()\r\n        i.action = Settings.ACTION_APPLICATION_DETAILS_SETTINGS\r\n        i.addCategory(Intent.CATEGORY_DEFAULT)\r\n        val packageName = activity.packageName\r\n        i.data = Uri.parse(\"package:$packageName\")\r\n        i.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK)\r\n        i.addFlags(Intent.FLAG_ACTIVITY_NO_HISTORY)\r\n        i.addFlags(Intent.FLAG_ACTIVITY_EXCLUDE_FROM_RECENTS)\r\n        activity.startActivity(i)\r\n    }\r\n\r\n    fun showDialogOK(activity: Activity, okListener: DialogInterface.OnClickListener) {\r\n        MaterialAlertDialogBuilder(activity)\r\n            .setMessage(\"All Permissions are required for this app\")\r\n            .setPositiveButton(\"OK\", okListener)\r\n            .setNegativeButton(\"Cancel\", okListener)\r\n            .create()\r\n            .show()\r\n    }\r\n}`\r\nconst multiplePermissionActivity =\r\n    `package com.example\r\n\r\nimport android.Manifest\r\nimport android.content.DialogInterface\r\nimport android.content.pm.PackageManager\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport android.os.Bundle\r\nimport android.widget.Button\r\nimport android.widget.Toast\r\nimport androidx.core.app.ActivityCompat\r\nimport androidx.core.content.ContextCompat\r\nimport com.example.Permission.settingActivityOpen\r\nimport com.example.Permission.showDialogOK\r\nimport java.util.ArrayList\r\n\r\nclass MainActivity : AppCompatActivity() {\r\n    private val multiplePermissionId = 1\r\n    private val permissionsReqList: ArrayList<String> = arrayListOf(\r\n        Manifest.permission.CAMERA,\r\n        Manifest.permission.READ_CONTACTS\r\n    )\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        setContentView(R.layout.activity_main)\r\n        findViewById<Button>(R.id.permissionBtn).setOnClickListener {\r\n            if (checkMultipleRequestPermissions()) {\r\n                doOperation()\r\n            }\r\n        }\r\n    }\r\n    private fun checkMultipleRequestPermissions(): Boolean {\r\n        val listPermissionsNeeded: MutableList<String> = ArrayList()\r\n\r\n        for (p in permissionsReqList) {\r\n            val result = ContextCompat.checkSelfPermission(this, p)\r\n            if (result != PackageManager.PERMISSION_GRANTED) {\r\n                listPermissionsNeeded.add(p)\r\n            }\r\n        }\r\n\r\n        if (listPermissionsNeeded.isNotEmpty()) {\r\n            ActivityCompat.requestPermissions(\r\n                this,\r\n                listPermissionsNeeded.toTypedArray(),\r\n                multiplePermissionId\r\n            )\r\n            return false\r\n        }\r\n        return true\r\n    }\r\n    override fun onRequestPermissionsResult(\r\n        requestCode: Int,\r\n        permissions: Array<out String>,\r\n        grantResults: IntArray\r\n    ) {\r\n        super.onRequestPermissionsResult(requestCode, permissions, grantResults)\r\n        if (requestCode == multiplePermissionId) {\r\n            if (grantResults.isNotEmpty()) {\r\n                var isGrant = true\r\n                for (element in grantResults) {\r\n                    if (element == PackageManager.PERMISSION_DENIED) {\r\n                        isGrant = false\r\n                    }\r\n                }\r\n                if (isGrant) {\r\n                    doOperation()\r\n                } else {\r\n                    var someDenied = false\r\n                    for (permission in permissions) {\r\n                        if (!ActivityCompat.shouldShowRequestPermissionRationale(\r\n                                this,\r\n                                permission\r\n                            )\r\n                        ) {\r\n                            if (ActivityCompat.checkSelfPermission(\r\n                                    this,\r\n                                    permission\r\n                                ) == PackageManager.PERMISSION_DENIED\r\n                            ) {\r\n                                someDenied = true\r\n                            }\r\n                        }\r\n                    }\r\n                    if (someDenied) {\r\n                        settingActivityOpen(this)\r\n                    } else {\r\n                        showDialogOK(this) { _: DialogInterface?, which: Int ->\r\n                            when (which) {\r\n                                DialogInterface.BUTTON_POSITIVE -> checkMultipleRequestPermissions()\r\n                                DialogInterface.BUTTON_NEGATIVE -> {\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private fun doOperation() {\r\n        Toast.makeText(this,\"Successfully\",Toast.LENGTH_LONG).show()\r\n    }\r\n}`\r\nmodule.exports = {\r\n    multiplAndroidManinfestXml: multiplAndroidManinfestXml,\r\n    multipleActivtyXMl: multipleActivtyXMl,\r\n    multipleString: multipleString,\r\n    multiplePermissionMethod: multiplePermissionMethod,\r\n    multiplePermissionActivity: multiplePermissionActivity\r\n};","const dialogActivtyXMl =\r\n    `<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<androidx.constraintlayout.widget.ConstraintLayout \r\n    xmlns:android=\"http://schemas.android.com/apk/res/android\"\r\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\r\n    xmlns:tools=\"http://schemas.android.com/tools\"\r\n    android:layout_width=\"match_parent\"\r\n    android:layout_height=\"match_parent\"\r\n    tools:context=\".MainActivity\">\r\n\r\n    <Button\r\n        android:id=\"@+id/Button\"\r\n        android:layout_width=\"wrap_content\"\r\n        android:layout_height=\"wrap_content\"\r\n        android:text=\"Dialog\"\r\n        app:layout_constraintBottom_toBottomOf=\"parent\"\r\n        app:layout_constraintLeft_toLeftOf=\"parent\"\r\n        app:layout_constraintRight_toRightOf=\"parent\"\r\n        app:layout_constraintTop_toTopOf=\"parent\" />\r\n\r\n</androidx.constraintlayout.widget.ConstraintLayout>`\r\n\r\nconst layout_progress =\r\n    `<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\r\n    android:orientation=\"horizontal\"\r\n    android:padding=\"13dp\"\r\n    android:layout_centerHorizontal=\"true\"\r\n    android:layout_width=\"wrap_content\"\r\n    android:layout_height=\"wrap_content\">\r\n\r\n    <ProgressBar\r\n        android:id=\"@+id/loader\"\r\n        android:layout_marginEnd=\"5dp\"\r\n        android:layout_width=\"45dp\"\r\n        android:layout_height=\"45dp\" />\r\n    <TextView\r\n        android:layout_width=\"wrap_content\"\r\n        android:text=\"Loading...\"\r\n        android:textAppearance=\"?android:textAppearanceSmall\"\r\n        android:layout_gravity=\"center_vertical\"\r\n        android:id=\"@+id/loading_msg\"\r\n        android:layout_height=\"wrap_content\" />\r\n\r\n</LinearLayout>`\r\n\r\nconst progressActivityKt =\r\n    `package com.example\r\n\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport android.os.Bundle\r\nimport android.widget.Button\r\nimport androidx.appcompat.app.AlertDialog\r\n\r\nclass MainActivity : AppCompatActivity() {\r\n\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        setContentView(R.layout.activity_main)\r\n        val builder = AlertDialog.Builder(this)\r\n        builder.setView(R.layout.layout_progress)\r\n        builder.setCancelable(true)\r\n        val alertDialog: AlertDialog = builder.create()\r\n        findViewById<Button>(R.id.Button).setOnClickListener {\r\n            alertDialog.show()\r\n        }\r\n    }\r\n}`\r\n\r\n\r\nconst layout_loading =\r\n    `<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<LinearLayout\r\n    xmlns:android=\"http://schemas.android.com/apk/res/android\"\r\n    android:layout_width=\"wrap_content\"\r\n    android:orientation=\"horizontal\"\r\n    android:padding=\"4dp\"\r\n    android:layout_height=\"wrap_content\">\r\n\r\n    <ProgressBar\r\n        android:id=\"@+id/progressBar\"\r\n        style=\"?android:attr/progressBarStyle\"\r\n        android:layout_width=\"wrap_content\"\r\n        android:layout_height=\"wrap_content\"\r\n        android:layout_weight=\"1\" />\r\n\r\n    <TextView\r\n        android:id=\"@+id/textView3\"\r\n        android:layout_width=\"wrap_content\"\r\n        android:layout_height=\"wrap_content\"\r\n        android:layout_weight=\"1\"\r\n        android:text=\"Loading\"\r\n        android:textStyle=\"bold\"\r\n        android:padding=\"8dp\"\r\n        android:layout_gravity=\"center\"/>\r\n</LinearLayout>`\r\n\r\nconst loadingActivityKt =\r\n    `package com.example\r\n\r\nimport android.app.Dialog\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport android.os.Bundle\r\nimport android.widget.Button\r\nimport android.widget.LinearLayout\r\n\r\nclass MainActivity : AppCompatActivity() {\r\n\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        setContentView(R.layout.activity_main)\r\n        val loadingDialog = Dialog(this)\r\n        loadingDialog.setContentView(R.layout.layout_loading)\r\n        loadingDialog.window!!.setLayout(\r\n            LinearLayout.LayoutParams.WRAP_CONTENT,\r\n            LinearLayout.LayoutParams.WRAP_CONTENT\r\n        )\r\n        loadingDialog.setCancelable(true)\r\n        findViewById<Button>(R.id.Button).setOnClickListener {\r\n            loadingDialog.show()\r\n        }\r\n    }\r\n}`\r\n\r\nconst alertActivityKt =\r\n    `package com.example\r\n\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport android.os.Bundle\r\nimport android.widget.Button\r\nimport android.widget.Toast\r\nimport androidx.appcompat.app.AlertDialog\r\n\r\nclass MainActivity : AppCompatActivity() {\r\n\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        setContentView(R.layout.activity_main)\r\n        val builder = AlertDialog.Builder(this)\r\n        builder.setTitle(\"Title\")\r\n        builder.setMessage(\"Message\")\r\n        builder.setIcon(android.R.drawable.ic_dialog_alert)\r\n        builder.setPositiveButton(\"Yes\") { _, _ ->\r\n            Toast.makeText(this, \"clicked yes\", Toast.LENGTH_LONG).show()\r\n        }\r\n        builder.setNeutralButton(\"Cancel\") { _, _ ->\r\n            Toast.makeText(this, \"clicked cancel operation cancel\", Toast.LENGTH_LONG).show()\r\n        }\r\n        builder.setNegativeButton(\"No\") { _, _ ->\r\n            Toast.makeText(this, \"clicked No\", Toast.LENGTH_LONG).show()\r\n        }\r\n        val alertDialog: AlertDialog = builder.create()\r\n        alertDialog.setCancelable(false)\r\n\r\n\r\n        findViewById<Button>(R.id.Button).setOnClickListener {\r\n            alertDialog.show()\r\n        }\r\n    }\r\n}`\r\nconst materialAlertActivityKt =\r\n    `package com.example\r\n\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport android.os.Bundle\r\nimport android.widget.Button\r\nimport android.widget.Toast\r\nimport com.google.android.material.dialog.MaterialAlertDialogBuilder\r\n\r\nclass MainActivity : AppCompatActivity() {\r\n\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        setContentView(R.layout.activity_main)\r\n        val materialDialog = MaterialAlertDialogBuilder(this)\r\n            .setTitle(\"Title\")\r\n            .setMessage(\"Message\")\r\n            .setIcon(android.R.drawable.ic_dialog_alert)\r\n            .setPositiveButton(\"Ok\") { _, _ ->\r\n                Toast.makeText(this, \"clicked ok\", Toast.LENGTH_LONG).show()\r\n            }\r\n            .setNegativeButton(\"Cancel\") { _, _ ->\r\n                Toast.makeText(this, \"clicked Cancel\", Toast.LENGTH_LONG).show()\r\n            }\r\n\r\n        findViewById<Button>(R.id.Button).setOnClickListener {\r\n            materialDialog.show()\r\n        }\r\n    }\r\n}`\r\nconst materialThemeDialogActivityKt =\r\n    `package com.example\r\n\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport android.os.Bundle\r\nimport android.widget.Button\r\nimport android.widget.Toast\r\nimport com.google.android.material.dialog.MaterialAlertDialogBuilder\r\n\r\nclass MainActivity : AppCompatActivity() {\r\n\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        setContentView(R.layout.activity_main)\r\n        var checkedItem = 2\r\n        val items = arrayOf(\"Light\", \"Dark\", \"Auto (System Default)\")\r\n        val materialThemeDialog = MaterialAlertDialogBuilder(this)\r\n            .setTitle(\"Theme\")\r\n            .setPositiveButton(\"Ok\") { _, _ ->\r\n                when (checkedItem) {\r\n                    0 -> {\r\n                        Toast.makeText(this, \"Light Mode\", Toast.LENGTH_LONG).show()\r\n                    }\r\n                    1 -> {\r\n                        Toast.makeText(this, \"Dark Mode\", Toast.LENGTH_LONG).show()\r\n                    }\r\n                    else -> {\r\n                        Toast.makeText(this, \"Auto\", Toast.LENGTH_LONG).show()\r\n                    }\r\n                }\r\n            }\r\n            .setSingleChoiceItems(items, checkedItem) { _, which ->\r\n                checkedItem = which\r\n            }\r\n            .setCancelable(false)\r\n\r\n        findViewById<Button>(R.id.Button).setOnClickListener {\r\n            materialThemeDialog.show()\r\n        }\r\n    }\r\n}`\r\nconst customeDialogActivityKt =\r\n    `package com.example\r\n\r\nimport android.app.Dialog\r\nimport android.content.Context\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport android.os.Bundle\r\nimport android.view.View\r\nimport android.view.inputmethod.InputMethodManager\r\nimport android.widget.*\r\nimport java.lang.Exception\r\n\r\nclass MainActivity : AppCompatActivity() {\r\n\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        setContentView(R.layout.activity_main)\r\n        val fileDialog = Dialog(this)\r\n        fileDialog.setContentView(R.layout.layout_custom_dialog)\r\n        fileDialog.window!!.setLayout(\r\n            LinearLayout.LayoutParams.MATCH_PARENT,\r\n            LinearLayout.LayoutParams.WRAP_CONTENT\r\n        )\r\n        val cancelBtn: Button = fileDialog.findViewById(R.id.cancel_btn)\r\n        val saveBtn: Button = fileDialog.findViewById(R.id.save_btn)\r\n        val edFileName: EditText = fileDialog.findViewById(R.id.edFileName)\r\n        val fileTypeRG: RadioGroup = fileDialog.findViewById(R.id.fileTypeGroup)\r\n        var fileTypeStr = \"male\"\r\n        fileTypeRG.setOnCheckedChangeListener { _: RadioGroup?, checkedId: Int ->\r\n            if (checkedId == R.id.radioMale) {\r\n                fileTypeStr = \"male\"\r\n            } else if (checkedId == R.id.radioFemale) {\r\n                fileTypeStr = \"female\"\r\n            }\r\n        }\r\n        cancelBtn.setOnClickListener { v: View ->\r\n            hideKeyboard(this,v)\r\n            fileDialog.dismiss()\r\n        }\r\n        saveBtn.setOnClickListener { v: View ->\r\n            if (edFileName.text.toString().trim().isEmpty()) {\r\n                edFileName.error = \"Required\"\r\n            } else {\r\n                Toast.makeText(this, edFileName.text.toString() + fileTypeStr, Toast.LENGTH_LONG).show()\r\n            }\r\n            hideKeyboard(this,v)\r\n            fileDialog.dismiss()\r\n        }\r\n\r\n        findViewById<Button>(R.id.Button).setOnClickListener {\r\n            fileDialog.show()\r\n        }\r\n    }\r\n    private fun hideKeyboard(context: Context, view: View) {\r\n        try {\r\n            val imm: InputMethodManager =\r\n                context.getSystemService(INPUT_METHOD_SERVICE) as InputMethodManager\r\n            imm.hideSoftInputFromWindow(view.windowToken, 0)\r\n        } catch (ignored: Exception) {\r\n        }\r\n    }\r\n}`\r\n\r\nmodule.exports = {\r\n    dialogActivtyXMl: dialogActivtyXMl,\r\n    layout_progress: layout_progress,\r\n    progressActivityKt: progressActivityKt,\r\n    layout_loading: layout_loading,\r\n    loadingActivityKt: loadingActivityKt,\r\n    alertActivityKt: alertActivityKt,\r\n    materialAlertActivityKt: materialAlertActivityKt,\r\n    materialThemeDialogActivityKt: materialThemeDialogActivityKt,\r\n    customeDialogActivityKt: customeDialogActivityKt\r\n};","const installedActivityXML =\r\n    `<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<androidx.constraintlayout.widget.ConstraintLayout \r\n    xmlns:android=\"http://schemas.android.com/apk/res/android\"\r\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\r\n    xmlns:tools=\"http://schemas.android.com/tools\"\r\n    android:layout_width=\"match_parent\"\r\n    android:layout_height=\"match_parent\"\r\n    tools:context=\".MainActivity\">\r\n\r\n    <TextView\r\n        android:id=\"@+id/totalInstalledApp\"\r\n        android:layout_width=\"match_parent\"\r\n        android:layout_height=\"wrap_content\"\r\n        android:text=\"@string/total_Installed_Apps\"\r\n        android:textAlignment=\"center\"\r\n        android:textStyle=\"bold\"\r\n        app:layout_constraintEnd_toEndOf=\"parent\"\r\n        app:layout_constraintStart_toStartOf=\"parent\"\r\n        app:layout_constraintTop_toTopOf=\"parent\" />\r\n\r\n    <androidx.recyclerview.widget.RecyclerView\r\n        android:id=\"@+id/recycler_view\"\r\n        android:layout_width=\"match_parent\"\r\n        android:layout_height=\"0dp\"\r\n        android:orientation=\"vertical\"\r\n        app:layoutManager=\"androidx.recyclerview.widget.LinearLayoutManager\"\r\n        app:layout_constraintBottom_toBottomOf=\"parent\"\r\n        app:layout_constraintLeft_toLeftOf=\"parent\"\r\n        app:layout_constraintRight_toRightOf=\"parent\"\r\n        app:layout_constraintTop_toBottomOf=\"@+id/totalInstalledApp\"\r\n        tools:listitem=\"@layout/layout_installed_app\" />\r\n</androidx.constraintlayout.widget.ConstraintLayout>`\r\n\r\nconst layout_installed_apps =\r\n    `<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<androidx.constraintlayout.widget.ConstraintLayout \r\n    xmlns:android=\"http://schemas.android.com/apk/res/android\"\r\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\r\n    android:layout_width=\"match_parent\"\r\n    android:layout_height=\"wrap_content\"\r\n    android:layout_margin=\"4dp\"\r\n    android:background=\"?attr/selectableItemBackground\"\r\n    android:elevation=\"6dp\">\r\n\r\n    <androidx.cardview.widget.CardView\r\n        android:id=\"@+id/cardview\"\r\n        android:layout_width=\"0dp\"\r\n        android:layout_height=\"wrap_content\"\r\n        android:layout_alignParentEnd=\"true\"\r\n        app:cardCornerRadius=\"5dp\"\r\n        app:cardUseCompatPadding=\"true\"\r\n        app:layout_constraintBottom_toBottomOf=\"parent\"\r\n        app:layout_constraintEnd_toEndOf=\"parent\"\r\n        app:layout_constraintStart_toStartOf=\"parent\"\r\n        app:layout_constraintTop_toTopOf=\"parent\">\r\n\r\n        <androidx.constraintlayout.widget.ConstraintLayout\r\n            android:layout_width=\"match_parent\"\r\n            android:layout_height=\"wrap_content\">\r\n\r\n            <ImageView\r\n                android:id=\"@+id/app_icon\"\r\n                android:layout_width=\"48dp\"\r\n                android:layout_height=\"48dp\"\r\n                android:layout_marginStart=\"8dp\"\r\n                android:layout_marginTop=\"2dp\"\r\n                android:layout_marginBottom=\"2dp\"\r\n                android:contentDescription=\"@string/todo\"\r\n                app:layout_constraintBottom_toBottomOf=\"parent\"\r\n                app:layout_constraintStart_toStartOf=\"parent\"\r\n                app:layout_constraintTop_toTopOf=\"parent\" />\r\n\r\n            <TextView\r\n                android:id=\"@+id/list_app_name\"\r\n                android:layout_width=\"0dp\"\r\n                android:layout_height=\"wrap_content\"\r\n                android:layout_marginStart=\"8dp\"\r\n                android:text=\"@string/app_name\"\r\n                android:textSize=\"16sp\"\r\n                android:textStyle=\"bold\"\r\n                app:layout_constraintEnd_toEndOf=\"parent\"\r\n                app:layout_constraintStart_toEndOf=\"@+id/app_icon\"\r\n                app:layout_constraintTop_toTopOf=\"parent\" />\r\n\r\n            <TextView\r\n                android:id=\"@+id/app_package\"\r\n                android:layout_width=\"0dp\"\r\n                android:layout_height=\"wrap_content\"\r\n                android:layout_marginStart=\"8dp\"\r\n                android:text=\"@string/app_package_name\"\r\n                android:textStyle=\"bold\"\r\n                app:layout_constraintBottom_toBottomOf=\"parent\"\r\n                app:layout_constraintEnd_toEndOf=\"parent\"\r\n                app:layout_constraintStart_toEndOf=\"@+id/app_icon\"\r\n                app:layout_constraintTop_toBottomOf=\"@+id/list_app_name\" />\r\n        </androidx.constraintlayout.widget.ConstraintLayout>\r\n    </androidx.cardview.widget.CardView>\r\n</androidx.constraintlayout.widget.ConstraintLayout>`\r\n\r\nconst installedLayoutLoadingXml =\r\n    `<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\r\n    android:layout_width=\"wrap_content\"\r\n    android:layout_height=\"wrap_content\"\r\n    android:orientation=\"horizontal\"\r\n    android:padding=\"4dp\">\r\n\r\n    <ProgressBar\r\n        android:id=\"@+id/progressBar\"\r\n        style=\"?android:attr/progressBarStyle\"\r\n        android:layout_width=\"wrap_content\"\r\n        android:layout_height=\"wrap_content\"\r\n        android:layout_weight=\"1\" />\r\n\r\n    <TextView\r\n        android:id=\"@+id/textView3\"\r\n        android:layout_width=\"wrap_content\"\r\n        android:layout_height=\"wrap_content\"\r\n        android:layout_gravity=\"center\"\r\n        android:layout_weight=\"1\"\r\n        android:padding=\"8dp\"\r\n        android:text=\"@string/loading\"\r\n        android:textStyle=\"bold\" />\r\n</LinearLayout>`\r\n\r\nconst installedString =\r\n    `<resources>\r\n    <string name=\"app_name\">Display All Installed App</string>\r\n    <string name=\"all_installed_app\">All Installed App</string>\r\n    <string name=\"app_package_name\">App Package Name</string>\r\n    <string name=\"total_Installed_Apps\">Total Installed Apps:</string>\r\n    <string name=\"search\">Search</string>\r\n    <string name=\"todo\">todo</string>\r\n    <string name=\"loading\">Loading…</string>\r\n</resources>`\r\n\r\nconst search_menuXml =\r\n    `<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<menu xmlns:android=\"http://schemas.android.com/apk/res/android\"\r\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\">\r\n    <item\r\n        android:id=\"@+id/app_bar_search\"\r\n        android:icon=\"@drawable/ic_search_black_24dp\"\r\n        android:title=\"@string/search\"\r\n        app:actionViewClass=\"androidx.appcompat.widget.SearchView\"\r\n        app:showAsAction=\"ifRoom|withText\" />\r\n</menu>`\r\nconst appModel =\r\n    `package com.example.models\r\n\r\nimport android.graphics.drawable.Drawable\r\n\r\nclass AppModel(private var name: String, private var icon: Drawable, private var packages: String) {\r\n    fun getName(): String {\r\n        return name\r\n    }\r\n\r\n    fun getIcon(): Drawable {\r\n        return icon\r\n    }\r\n\r\n    fun getPackages(): String {\r\n        return packages\r\n    }\r\n}`\r\n\r\nconst appAdapter =\r\n    `package com.example.adapters\r\n\r\nimport android.app.AlertDialog\r\nimport android.content.Context\r\nimport android.view.LayoutInflater\r\nimport android.view.View\r\nimport android.view.ViewGroup\r\nimport android.widget.ImageView\r\nimport android.widget.TextView\r\nimport androidx.recyclerview.widget.RecyclerView\r\nimport com.example.R\r\nimport com.example.models.AppModel\r\nimport java.util.ArrayList\r\n\r\nimport android.content.Intent\r\nimport android.net.Uri\r\nimport android.provider.Settings\r\nimport android.widget.Toast\r\n\r\n\r\nclass AppAdapter(private val context: Context, private var appModelList: ArrayList<AppModel>) :\r\n    RecyclerView.Adapter<AppAdapter.ViewHolder>() {\r\n\r\n\r\n    class ViewHolder(ItemView: View) : RecyclerView.ViewHolder(ItemView) {\r\n        val appNameTxt: TextView = itemView.findViewById(R.id.list_app_name)\r\n        val appPackageNameTxt: TextView = itemView.findViewById(R.id.app_package)\r\n        val appIcon: ImageView = itemView.findViewById(R.id.app_icon)\r\n    }\r\n\r\n    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): ViewHolder {\r\n        val view: View =\r\n            LayoutInflater.from(parent.context)\r\n                .inflate(R.layout.layout_installed_app, parent, false)\r\n        return ViewHolder(view)\r\n    }\r\n\r\n    override fun onBindViewHolder(holder: ViewHolder, position: Int) {\r\n        holder.appNameTxt.text = appModelList[position].getName()\r\n        holder.appIcon.setImageDrawable(appModelList[position].getIcon())\r\n        holder.appPackageNameTxt.text = appModelList[position].getPackages()\r\n\r\n        holder.itemView.setOnClickListener {\r\n            val dialogListTitle = arrayOf(\"Open App\", \"App Info\")\r\n            val builder: AlertDialog.Builder = AlertDialog.Builder(context)\r\n            builder.setTitle(\"Choose Action\")\r\n                .setItems(\r\n                    dialogListTitle\r\n                ) { _, which ->\r\n                    when (which) {\r\n                        0 -> {\r\n                            val intent =\r\n                                context.packageManager.getLaunchIntentForPackage(appModelList[position].getPackages())\r\n                            if (intent != null) {\r\n                                context.startActivity(intent)\r\n                            } else {\r\n                                Toast.makeText(\r\n                                    context,\r\n                                    \"System app is not open for any reason.\",\r\n                                    Toast.LENGTH_LONG\r\n                                ).show()\r\n                            }\r\n                        }\r\n                        1 -> {\r\n                            val intent = Intent()\r\n                            intent.action = Settings.ACTION_APPLICATION_DETAILS_SETTINGS\r\n                            intent.data =\r\n                                Uri.parse(\"package:\"+appModelList[position].getPackages())\r\n                            context.startActivity(intent)\r\n                        }\r\n                    }\r\n                }\r\n            builder.show()\r\n        }\r\n\r\n    }\r\n\r\n    override fun getItemCount(): Int {\r\n        return appModelList.size\r\n    }\r\n}`\r\nconst installedActivityKt =\r\n    `package com.example\r\n\r\nimport android.annotation.SuppressLint\r\nimport android.app.Dialog\r\nimport android.content.pm.ApplicationInfo\r\nimport android.content.pm.PackageInfo\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport android.os.Bundle\r\nimport android.os.Handler\r\nimport android.os.Looper\r\nimport android.view.Menu\r\nimport android.widget.LinearLayout\r\nimport android.widget.TextView\r\nimport androidx.appcompat.widget.SearchView\r\nimport androidx.recyclerview.widget.RecyclerView\r\nimport com.example.adapters.AppAdapter\r\nimport com.example.models.AppModel\r\nimport java.util.*\r\nimport kotlin.collections.ArrayList\r\n\r\n\r\nclass MainActivity : AppCompatActivity() {\r\n    private lateinit var recyclerView: RecyclerView\r\n    private lateinit var installedAppsList: ArrayList<AppModel>\r\n    private lateinit var installedAppAdapter: AppAdapter\r\n\r\n    @SuppressLint(\"SetTextI18n\")\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        setContentView(R.layout.activity_main)\r\n        recyclerView = findViewById(R.id.recycler_view)\r\n        val loadingDialog = Dialog(this)\r\n        loadingDialog.setContentView(R.layout.layout_loading)\r\n        loadingDialog.window!!.setLayout(\r\n            LinearLayout.LayoutParams.WRAP_CONTENT,\r\n            LinearLayout.LayoutParams.WRAP_CONTENT\r\n        )\r\n        loadingDialog.setCancelable(false)\r\n        installedAppsList = ArrayList()\r\n        loadingDialog.show()\r\n        Handler(Looper.getMainLooper()).postDelayed({\r\n            getInstalledApps()\r\n            loadingDialog.dismiss()\r\n            findViewById<TextView>(R.id.totalInstalledApp).text =\r\n                getString(R.string.total_Installed_Apps) + installedAppsList.size.toString()\r\n            installedAppAdapter = AppAdapter(this, installedAppsList)\r\n            recyclerView.adapter = installedAppAdapter\r\n        }, 500)\r\n\r\n    }\r\n\r\n    @SuppressLint(\"QueryPermissionsNeeded\")\r\n    private fun getInstalledApps(): ArrayList<AppModel> {\r\n        installedAppsList.clear()\r\n        val packs = packageManager.getInstalledPackages(0)\r\n        for (i in packs.indices) {\r\n            val p = packs[i]\r\n            if (!isSystemPackage(p)) {\r\n                val appName = p.applicationInfo.loadLabel(packageManager).toString()\r\n                val icon = p.applicationInfo.loadIcon(packageManager)\r\n                val packages = p.applicationInfo.packageName\r\n                installedAppsList.add(AppModel(appName, icon, packages))\r\n            }\r\n        }\r\n        installedAppsList.sortBy { it.getName().capitalized() }\r\n        return installedAppsList\r\n    }\r\n\r\n    private fun String.capitalized(): String {\r\n        return this.replaceFirstChar {\r\n            if (it.isLowerCase())\r\n                it.titlecase(Locale.getDefault())\r\n            else it.toString()\r\n        }\r\n    }\r\n\r\n    private fun isSystemPackage(pkgInfo: PackageInfo): Boolean {\r\n        return pkgInfo.applicationInfo.flags and ApplicationInfo.FLAG_SYSTEM != 0\r\n    }\r\n\r\n    override fun onCreateOptionsMenu(menu: Menu): Boolean {\r\n        menuInflater.inflate(R.menu.search_menu, menu)\r\n        val search = menu.findItem(R.id.app_bar_search)\r\n\r\n        val searchView = search.actionView as SearchView\r\n        searchView.maxWidth = android.R.attr.width\r\n        searchView.queryHint = \"Search app name or package\"\r\n        searchView.setOnQueryTextListener(object : SearchView.OnQueryTextListener {\r\n            override fun onQueryTextSubmit(query: String?): Boolean {\r\n                return false\r\n            }\r\n\r\n            @SuppressLint(\"NotifyDataSetChanged\")\r\n            override fun onQueryTextChange(newText: String?): Boolean {\r\n                val appModelArrayList: ArrayList<AppModel> = ArrayList()\r\n\r\n                for (i in installedAppsList) {\r\n                    if (i.getName().lowercase(Locale.getDefault()).contains(\r\n                            newText!!.lowercase(\r\n                                Locale.getDefault()\r\n                            )\r\n                        )\r\n                        ||\r\n                        i.getPackages().lowercase(Locale.getDefault()).contains(\r\n                            newText.lowercase(\r\n                                Locale.getDefault()\r\n                            )\r\n                        )\r\n                    ) {\r\n                        appModelArrayList.add(i)\r\n                    }\r\n                }\r\n                installedAppAdapter =\r\n                    AppAdapter(this@MainActivity, appModelArrayList)\r\n\r\n                recyclerView.adapter = installedAppAdapter\r\n                installedAppAdapter.notifyDataSetChanged()\r\n                return true\r\n            }\r\n        })\r\n\r\n        return super.onCreateOptionsMenu(menu)\r\n    }\r\n}`;\r\nmodule.exports = {\r\n    installedActivityXML: installedActivityXML,\r\n    layout_installed_apps: layout_installed_apps,\r\n    installedLayoutLoadingXml: installedLayoutLoadingXml,\r\n    installedString: installedString,\r\n    search_menuXml: search_menuXml,\r\n    appModel: appModel,\r\n    appAdapter: appAdapter,\r\n    installedActivityKt: installedActivityKt,\r\n};","const ThemeSplashActivityKt =\r\n    `package com.example\r\n\r\nimport android.annotation.SuppressLint\r\nimport android.content.Intent\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport android.os.Bundle\r\nimport androidx.appcompat.app.AppCompatDelegate\r\nimport android.os.Handler\r\nimport android.os.Looper\r\n\r\n@SuppressLint(\"CustomSplashScreen\")\r\nclass SplashActivity : AppCompatActivity() {\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        val sharedPreferences = getSharedPreferences(getString(R.string.app_name), MODE_PRIVATE)\r\n        when (sharedPreferences.getInt(\"night_mode\", 2)) {\r\n            0 -> AppCompatDelegate.setDefaultNightMode(AppCompatDelegate.MODE_NIGHT_NO)\r\n            1 -> AppCompatDelegate.setDefaultNightMode(AppCompatDelegate.MODE_NIGHT_YES)\r\n            else -> AppCompatDelegate.setDefaultNightMode(AppCompatDelegate.MODE_NIGHT_FOLLOW_SYSTEM)\r\n        }\r\n        setContentView(R.layout.activity_splash)\r\n        Timer().schedule(1000) {\r\n            Handler(Looper.getMainLooper()).postDelayed({\r\n                startActivity(Intent(this@SplashActivity, MainActivity::class.java))\r\n                finish()\r\n            }, 1000)\r\n        }\r\n    }\r\n\r\n}`\r\nconst ThemeMainActivityKt =\r\n    `package com.example\r\n\r\nimport android.content.SharedPreferences\r\nimport android.os.Bundle\r\nimport android.widget.LinearLayout\r\nimport android.widget.TextView\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport androidx.appcompat.app.AppCompatDelegate\r\nimport com.google.android.material.dialog.MaterialAlertDialogBuilder\r\n\r\n\r\nclass MainActivity : AppCompatActivity() {\r\n    private lateinit var sharedPreferences: SharedPreferences\r\n    private val items = arrayOf(\"Light\", \"Dark\", \"Auto (System Default)\")\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        setContentView(R.layout.activity_main)\r\n\r\n        sharedPreferences = getSharedPreferences(getString(R.string.app_name), MODE_PRIVATE)\r\n        themeChangeText(findViewById(R.id.themeStateTxt))\r\n        findViewById<LinearLayout>(R.id.themeChangeLayout).setOnClickListener { themeDialog() }\r\n    }\r\n\r\n    private fun themeChangeText(themeStateTxt: TextView) {\r\n        when (sharedPreferences.getInt(\"night_mode\", 2)) {\r\n            0 -> themeStateTxt.text = items[0]\r\n            1 -> themeStateTxt.text = items[1]\r\n            else -> themeStateTxt.text = items[2]\r\n        }\r\n    }\r\n\r\n    private fun themeDialog() {\r\n        var checkedItem = sharedPreferences.getInt(\"night_mode\", 2)\r\n\r\n        MaterialAlertDialogBuilder(this)\r\n            .setTitle(\"Theme\")\r\n            .setPositiveButton(\"Ok\") { _, _ ->\r\n                when (checkedItem) {\r\n                    0 -> {\r\n                        sharedPreferences.edit().putInt(\"night_mode\", 0).apply()\r\n                        AppCompatDelegate.setDefaultNightMode(AppCompatDelegate.MODE_NIGHT_NO)\r\n                    }\r\n                    1 -> {\r\n                        sharedPreferences.edit().putInt(\"night_mode\", 1).apply()\r\n                        AppCompatDelegate.setDefaultNightMode(AppCompatDelegate.MODE_NIGHT_YES)\r\n                    }\r\n                    else -> {\r\n                        sharedPreferences.edit().putInt(\"night_mode\", 2).apply()\r\n                        AppCompatDelegate.setDefaultNightMode(AppCompatDelegate.MODE_NIGHT_FOLLOW_SYSTEM)\r\n                    }\r\n                }\r\n                themeChangeText(findViewById(R.id.themeStateTxt))\r\n            }\r\n            .setSingleChoiceItems(items, checkedItem) { _, which ->\r\n                checkedItem = which\r\n            }\r\n            .setCancelable(false)\r\n            .show()\r\n    }\r\n}`\r\n\r\nconst ThemeSplashXML =\r\n    `<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<androidx.constraintlayout.widget.ConstraintLayout \r\n    xmlns:android=\"http://schemas.android.com/apk/res/android\"\r\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\r\n    xmlns:tools=\"http://schemas.android.com/tools\"\r\n    android:layout_width=\"match_parent\"\r\n    android:layout_height=\"match_parent\"\r\n    tools:context=\".SplashActivity\">\r\n\r\n    <TextView\r\n        android:id=\"@+id/textView\"\r\n        android:textSize=\"32sp\"\r\n        android:layout_width=\"wrap_content\"\r\n        android:layout_height=\"wrap_content\"\r\n        android:text=\"Welcome\"\r\n        android:theme=\"@style/textView\"\r\n        app:layout_constraintBottom_toBottomOf=\"parent\"\r\n        app:layout_constraintEnd_toEndOf=\"parent\"\r\n        app:layout_constraintStart_toStartOf=\"parent\"\r\n        app:layout_constraintTop_toTopOf=\"parent\" />\r\n\r\n</androidx.constraintlayout.widget.ConstraintLayout>`\r\n\r\nconst ThemeActiviyMainXML =\r\n    `<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<androidx.constraintlayout.widget.ConstraintLayout \r\n    xmlns:android=\"http://schemas.android.com/apk/res/android\"\r\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\r\n    xmlns:tools=\"http://schemas.android.com/tools\"\r\n    android:layout_width=\"match_parent\"\r\n    android:layout_height=\"match_parent\"\r\n    tools:context=\".MainActivity\">\r\n\r\n    <LinearLayout\r\n        android:id=\"@+id/themeChangeLayout\"\r\n        android:layout_width=\"match_parent\"\r\n        android:layout_height=\"wrap_content\"\r\n        android:background=\"?attr/selectableItemBackground\"\r\n        android:orientation=\"vertical\"\r\n        android:padding=\"8dp\"\r\n        app:layout_constraintBottom_toBottomOf=\"parent\"\r\n        app:layout_constraintEnd_toEndOf=\"parent\"\r\n        app:layout_constraintStart_toStartOf=\"parent\"\r\n        app:layout_constraintTop_toTopOf=\"parent\">\r\n\r\n        <TextView\r\n            android:layout_width=\"wrap_content\"\r\n            android:layout_height=\"wrap_content\"\r\n            android:layout_marginStart=\"4dp\"\r\n            android:text=\"Theme\"\r\n            android:theme=\"@style/textView\" />\r\n\r\n        <TextView\r\n            android:id=\"@+id/themeStateTxt\"\r\n            android:layout_width=\"wrap_content\"\r\n            android:layout_height=\"wrap_content\"\r\n            android:layout_marginStart=\"4dp\"\r\n            android:theme=\"@style/textView\"\r\n            android:textSize=\"12sp\" />\r\n    </LinearLayout>\r\n</androidx.constraintlayout.widget.ConstraintLayout>`\r\n\r\nconst ThemeColorXML =\r\n    `<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<resources>\r\n    <color name=\"purple_200\">#FFBB86FC</color>\r\n    <color name=\"purple_500\">#FF6200EE</color>\r\n    <color name=\"purple_700\">#FF3700B3</color>\r\n    <color name=\"teal_200\">#FF03DAC5</color>\r\n    <color name=\"teal_700\">#FF018786</color>\r\n    <color name=\"black\">#FF000000</color>\r\n    <color name=\"white\">#FFFFFFFF</color>\r\n\r\n    <color name=\"textColorLight\">#0026FF</color>\r\n    <color name=\"textColorDark\">#FFD600</color>\r\n\r\n</resources>`\r\nconst ThemeLightXML =\r\n    `<resources xmlns:tools=\"http://schemas.android.com/tools\">\r\n<!-- Base application theme. -->\r\n<style name=\"Theme.AllExample\" parent=\"Theme.MaterialComponents.DayNight.DarkActionBar\">\r\n    <!-- Primary brand color. -->\r\n    <item name=\"colorPrimary\">@color/purple_500</item>\r\n    <item name=\"colorPrimaryVariant\">@color/purple_700</item>\r\n    <item name=\"colorOnPrimary\">@color/white</item>\r\n    <!-- Secondary brand color. -->\r\n    <item name=\"colorSecondary\">@color/teal_200</item>\r\n    <item name=\"colorSecondaryVariant\">@color/teal_700</item>\r\n    <item name=\"colorOnSecondary\">@color/black</item>\r\n    <!-- Status bar color. -->\r\n    <item name=\"android:statusBarColor\" tools:targetApi=\"l\">?attr/colorPrimaryVariant</item>\r\n    <!-- Customize your theme here. -->\r\n</style>\r\n\r\n<style name=\"textView\" parent=\"Theme.AllExample\">\r\n    <item name=\"android:textColor\">@color/textColorLight</item>\r\n</style>\r\n</resources>`\r\nconst ThemeDarkXML =\r\n    `<resources xmlns:tools=\"http://schemas.android.com/tools\">\r\n<!-- Base application theme. -->\r\n<style name=\"Theme.AllExample\" parent=\"Theme.MaterialComponents.DayNight.DarkActionBar\">\r\n    <!-- Primary brand color. -->\r\n    <item name=\"colorPrimary\">@color/purple_200</item>\r\n    <item name=\"colorPrimaryVariant\">@color/purple_700</item>\r\n    <item name=\"colorOnPrimary\">@color/black</item>\r\n    <!-- Secondary brand color. -->\r\n    <item name=\"colorSecondary\">@color/teal_200</item>\r\n    <item name=\"colorSecondaryVariant\">@color/teal_200</item>\r\n    <item name=\"colorOnSecondary\">@color/black</item>\r\n    <!-- Status bar color. -->\r\n    <item name=\"android:statusBarColor\" tools:targetApi=\"l\">?attr/colorPrimaryVariant</item>\r\n    <!-- Customize your theme here. -->\r\n</style>\r\n\r\n<style name=\"textView\" parent=\"Theme.AllExample\">\r\n    <item name=\"android:textColor\">@color/textColorDark</item>\r\n</style>\r\n</resources>`\r\nconst ThemeAndroidMainfest =\r\n    `<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\r\n    package=\"com.example\">\r\n\r\n    <application\r\n        android:allowBackup=\"true\"\r\n        android:icon=\"@mipmap/ic_launcher\"\r\n        android:label=\"@string/app_name\"\r\n        android:roundIcon=\"@mipmap/ic_launcher_round\"\r\n        android:supportsRtl=\"true\"\r\n        android:theme=\"@style/Theme.AllExample\">\r\n        <activity\r\n            android:name=\".SplashActivity\"\r\n            android:configChanges=\"uiMode\"\r\n            android:exported=\"true\">\r\n            <intent-filter>\r\n                <action android:name=\"android.intent.action.MAIN\" />\r\n\r\n                <category android:name=\"android.intent.category.LAUNCHER\" />\r\n            </intent-filter>\r\n        </activity>\r\n        <activity\r\n            android:name=\".MainActivity\"\r\n            android:exported=\"false\" />\r\n    </application>\r\n\r\n</manifest>`\r\nmodule.exports = {\r\n    ThemeColorXML: ThemeColorXML,\r\n    ThemeLightXML: ThemeLightXML,\r\n    ThemeDarkXML: ThemeDarkXML,\r\n    ThemeActiviyMainXML: ThemeActiviyMainXML,\r\n    ThemeMainActivityKt: ThemeMainActivityKt,\r\n    ThemeSplashXML: ThemeSplashXML,\r\n    ThemeSplashActivityKt: ThemeSplashActivityKt,\r\n    ThemeAndroidMainfest: ThemeAndroidMainfest\r\n};","const SimpleDatePickerActivityXMl =\r\n    `<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<androidx.constraintlayout.widget.ConstraintLayout \r\n    xmlns:android=\"http://schemas.android.com/apk/res/android\"\r\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\r\n    xmlns:tools=\"http://schemas.android.com/tools\"\r\n    android:layout_width=\"match_parent\"\r\n    android:layout_height=\"match_parent\"\r\n    tools:context=\".MainActivity\">\r\n\r\n    <LinearLayout\r\n        android:layout_width=\"match_parent\"\r\n        android:layout_height=\"wrap_content\"\r\n        android:orientation=\"vertical\"\r\n        app:layout_constraintBottom_toBottomOf=\"parent\"\r\n        app:layout_constraintEnd_toEndOf=\"parent\"\r\n        app:layout_constraintStart_toStartOf=\"parent\"\r\n        app:layout_constraintTop_toTopOf=\"parent\">\r\n\r\n        <TextView\r\n            android:id=\"@+id/dateTxt\"\r\n            android:layout_width=\"match_parent\"\r\n            android:layout_height=\"wrap_content\"\r\n            android:textAlignment=\"center\"\r\n            android:textSize=\"16sp\" />\r\n\r\n        <Button\r\n            android:id=\"@+id/simpleDatePickerBtn\"\r\n            android:layout_width=\"match_parent\"\r\n            android:layout_height=\"wrap_content\"\r\n            android:layout_margin=\"8dp\"\r\n            android:text=\"simple date picker\" />\r\n    </LinearLayout>\r\n</androidx.constraintlayout.widget.ConstraintLayout>`\r\n\r\nconst SimpleDatePickerActivityKT =\r\n    `package com.example\r\n\r\nimport android.app.DatePickerDialog\r\nimport android.os.Bundle\r\nimport android.widget.Button\r\nimport android.widget.TextView\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport java.text.SimpleDateFormat\r\nimport java.util.*\r\n\r\n\r\nclass MainActivity : AppCompatActivity() {\r\n\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        setContentView(R.layout.activity_main)\r\n\r\n        // todo: Simple date picker code\r\n        val cal = Calendar.getInstance()\r\n        findViewById<TextView>(R.id.dateTxt).text = \"--/--/----\"\r\n        val dateSetListener =\r\n            DatePickerDialog.OnDateSetListener { _, year, monthOfYear, dayOfMonth ->\r\n                cal.set(Calendar.YEAR, year)\r\n                cal.set(Calendar.MONTH, monthOfYear)\r\n                cal.set(Calendar.DAY_OF_MONTH, dayOfMonth)\r\n                val myFormat = \"dd-MMM-yyyy\" // mention the format you need\r\n                val sdf = SimpleDateFormat(myFormat, Locale.US)\r\n                findViewById<TextView>(R.id.dateTxt).text = sdf.format(cal.time)\r\n            }\r\n        findViewById<Button>(R.id.simpleDatePickerBtn).setOnClickListener {\r\n            DatePickerDialog(\r\n                this,\r\n                dateSetListener,\r\n                cal.get(Calendar.YEAR),\r\n                cal.get(Calendar.MONTH),\r\n                cal.get(Calendar.DAY_OF_MONTH)\r\n            ).show()\r\n        }\r\n        // todo: Simple date picker code\r\n    }\r\n\r\n}`\r\n\r\nmodule.exports = {\r\n    SimpleDatePickerActivityXMl: SimpleDatePickerActivityXMl,\r\n    SimpleDatePickerActivityKT: SimpleDatePickerActivityKT\r\n};","const MaterialDatePickerActivityXMl =\r\n    `<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<androidx.constraintlayout.widget.ConstraintLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\r\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\r\n    xmlns:tools=\"http://schemas.android.com/tools\"\r\n    android:layout_width=\"match_parent\"\r\n    android:layout_height=\"match_parent\"\r\n    tools:context=\".MainActivity\">\r\n\r\n    <LinearLayout\r\n        android:layout_width=\"match_parent\"\r\n        android:layout_height=\"wrap_content\"\r\n        android:orientation=\"vertical\"\r\n        app:layout_constraintBottom_toBottomOf=\"parent\"\r\n        app:layout_constraintEnd_toEndOf=\"parent\"\r\n        app:layout_constraintStart_toStartOf=\"parent\"\r\n        app:layout_constraintTop_toTopOf=\"parent\">\r\n\r\n        <TextView\r\n            android:id=\"@+id/dateTxt\"\r\n            android:layout_width=\"match_parent\"\r\n            android:layout_height=\"wrap_content\"\r\n            android:textAlignment=\"center\"\r\n            android:textSize=\"16sp\" />\r\n\r\n        <Button\r\n            android:id=\"@+id/materialDatePickerBtn\"\r\n            android:layout_width=\"match_parent\"\r\n            android:layout_height=\"wrap_content\"\r\n            android:layout_margin=\"8dp\"\r\n            android:text=\"Material date picker\" />\r\n    </LinearLayout>\r\n</androidx.constraintlayout.widget.ConstraintLayout>`\r\n\r\nconst MaterialDatePickerActivityKT =\r\n    `package com.example\r\n\r\nimport android.os.Bundle\r\nimport android.widget.Button\r\nimport android.widget.TextView\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport com.google.android.material.datepicker.MaterialDatePicker\r\nimport java.text.SimpleDateFormat\r\nimport java.util.*\r\n\r\n\r\nclass MainActivity : AppCompatActivity() {\r\n\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        setContentView(R.layout.activity_main)\r\n\r\n        // todo: Material date picker code\r\n        val materialDatePicker =\r\n            MaterialDatePicker.Builder.datePicker()\r\n                .setTitleText(\"Select Date\")\r\n                //  .setSelection(MaterialDatePicker.todayInUtcMilliseconds())\r\n                .build()\r\n        materialDatePicker.addOnPositiveButtonClickListener {\r\n            val myFormat = \"dd-MMM-yyyy\" // mention the format you need\r\n            val sdf = SimpleDateFormat(myFormat, Locale.US)\r\n            findViewById<TextView>(R.id.dateTxt).text = sdf.format(materialDatePicker.selection)\r\n        }\r\n        findViewById<Button>(R.id.materialDatePickerBtn).setOnClickListener {\r\n            materialDatePicker.show(supportFragmentManager,\"MATERIAL_DATE_PICKER\")\r\n        }\r\n        // todo: Material date picker code\r\n    }\r\n\r\n}`\r\n\r\nmodule.exports = {\r\n    MaterialDatePickerActivityXMl: MaterialDatePickerActivityXMl,\r\n    MaterialDatePickerActivityKT: MaterialDatePickerActivityKT\r\n};","const SimpleTimePickerActivityXMl =\r\n    `<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<androidx.constraintlayout.widget.ConstraintLayout \r\n    xmlns:android=\"http://schemas.android.com/apk/res/android\"\r\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\r\n    xmlns:tools=\"http://schemas.android.com/tools\"\r\n    android:layout_width=\"match_parent\"\r\n    android:layout_height=\"match_parent\"\r\n    tools:context=\".MainActivity\">\r\n\r\n    <LinearLayout\r\n        android:layout_width=\"match_parent\"\r\n        android:layout_height=\"wrap_content\"\r\n        android:orientation=\"vertical\"\r\n        app:layout_constraintBottom_toBottomOf=\"parent\"\r\n        app:layout_constraintEnd_toEndOf=\"parent\"\r\n        app:layout_constraintStart_toStartOf=\"parent\"\r\n        app:layout_constraintTop_toTopOf=\"parent\">\r\n\r\n        <TextView\r\n            android:id=\"@+id/timeTxt\"\r\n            android:layout_width=\"match_parent\"\r\n            android:layout_height=\"wrap_content\"\r\n            android:textAlignment=\"center\"\r\n            android:textSize=\"16sp\" />\r\n\r\n        <Button\r\n            android:id=\"@+id/simpleTimePickerBtn\"\r\n            android:layout_width=\"match_parent\"\r\n            android:layout_height=\"wrap_content\"\r\n            android:layout_margin=\"8dp\"\r\n            android:text=\"Simple Time Picker\" />\r\n    </LinearLayout>\r\n</androidx.constraintlayout.widget.ConstraintLayout>`\r\n\r\nconst SimpleTimePickerActivityKT =\r\n    `package com.example\r\n\r\nimport android.annotation.SuppressLint\r\nimport android.app.TimePickerDialog\r\nimport android.os.Bundle\r\nimport android.widget.Button\r\nimport android.widget.TextView\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport java.text.DecimalFormat\r\nimport java.text.NumberFormat\r\nimport java.util.*\r\n\r\n\r\nclass MainActivity : AppCompatActivity() {\r\n\r\n    @SuppressLint(\"SetTextI18n\")\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        setContentView(R.layout.activity_main)\r\n        \r\n        // todo: Simple time picker code\r\n        findViewById<TextView>(R.id.timeTxt).text = \"--:--\"\r\n        val mTimePicker: TimePickerDialog\r\n        val mCurrentTime = Calendar.getInstance()\r\n        val hour = mCurrentTime.get(Calendar.HOUR_OF_DAY)\r\n        val minutes = mCurrentTime.get(Calendar.MINUTE)\r\n\r\n        mTimePicker = TimePickerDialog(this,\r\n            { _, hourOfDay, minute ->\r\n                val modifiedHour = getHourAMPM(hourOfDay)\r\n                val pmAm = if (hourOfDay > 11) \"PM\" else \"AM\"\r\n                val f: NumberFormat = DecimalFormat(\"00\")\r\n                findViewById<TextView>(R.id.timeTxt).text =\r\n                    f.format(modifiedHour).toString() + \":\" + f.format(minute).toString() + pmAm\r\n\r\n            }, hour, minutes, false\r\n        )\r\n\r\n        findViewById<Button>(R.id.simpleTimePickerBtn).setOnClickListener {\r\n            mTimePicker.show()\r\n        }\r\n        // todo: Simple time picker code\r\n\r\n    }\r\n\r\n    private fun getHourAMPM(hour: Int): Int {\r\n        // Return the hour value for AM PM time format\r\n        var modifiedHour = if (hour > 11) hour - 12 else hour\r\n        if (modifiedHour == 0) {\r\n            modifiedHour = 12\r\n        }\r\n        return modifiedHour\r\n    }\r\n}`\r\n\r\nmodule.exports = {\r\n    SimpleTimePickerActivityXMl: SimpleTimePickerActivityXMl,\r\n    SimpleTimePickerActivityKT: SimpleTimePickerActivityKT\r\n};\r\n","const MaterialTimePickerActivityXMl =\r\n    `<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<androidx.constraintlayout.widget.ConstraintLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\r\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\r\n    xmlns:tools=\"http://schemas.android.com/tools\"\r\n    android:layout_width=\"match_parent\"\r\n    android:layout_height=\"match_parent\"\r\n    tools:context=\".MainActivity\">\r\n\r\n    <LinearLayout\r\n        android:layout_width=\"match_parent\"\r\n        android:layout_height=\"wrap_content\"\r\n        android:orientation=\"vertical\"\r\n        app:layout_constraintBottom_toBottomOf=\"parent\"\r\n        app:layout_constraintEnd_toEndOf=\"parent\"\r\n        app:layout_constraintStart_toStartOf=\"parent\"\r\n        app:layout_constraintTop_toTopOf=\"parent\">\r\n\r\n        <TextView\r\n            android:id=\"@+id/timeTxt\"\r\n            android:layout_width=\"match_parent\"\r\n            android:layout_height=\"wrap_content\"\r\n            android:textAlignment=\"center\"\r\n            android:textSize=\"16sp\" />\r\n\r\n        <Button\r\n            android:id=\"@+id/materialTimePickerBtn\"\r\n            android:layout_width=\"match_parent\"\r\n            android:layout_height=\"wrap_content\"\r\n            android:layout_margin=\"8dp\"\r\n            android:text=\"Material Time Picker\" />\r\n    </LinearLayout>\r\n</androidx.constraintlayout.widget.ConstraintLayout>`\r\n\r\nconst MaterialTimePickerActivityKT =\r\n    `package com.example\r\n\r\nimport android.annotation.SuppressLint\r\nimport android.app.TimePickerDialog\r\nimport android.os.Bundle\r\nimport android.widget.Button\r\nimport android.widget.TextView\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport com.google.android.material.timepicker.MaterialTimePicker\r\nimport com.google.android.material.timepicker.TimeFormat\r\nimport java.text.DecimalFormat\r\nimport java.text.NumberFormat\r\nimport java.util.*\r\n\r\n\r\nclass MainActivity : AppCompatActivity() {\r\n\r\n    @SuppressLint(\"SetTextI18n\")\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        setContentView(R.layout.activity_main)\r\n        \r\n        // todo: Material time picker code\r\n        val materialTimePicker =\r\n            MaterialTimePicker.Builder()\r\n                .setTimeFormat(TimeFormat.CLOCK_12H)\r\n                .setTitleText(\"Select Time\")\r\n                .build()\r\n        materialTimePicker.addOnPositiveButtonClickListener {\r\n            val pickedHour: Int = materialTimePicker.hour\r\n            val pickedMinute: Int = materialTimePicker.minute\r\n            val modifiedHour = getHourAMPM(pickedHour)\r\n            val f: NumberFormat = DecimalFormat(\"00\")\r\n            val pmAm = if (pickedHour > 11) \"PM\" else \"AM\"\r\n            findViewById<TextView>(R.id.timeTxt).text =\r\n                f.format(modifiedHour).toString() + \":\" + f.format(pickedMinute).toString() + pmAm\r\n        }\r\n        findViewById<Button>(R.id.materialTimePickerBtn).setOnClickListener {\r\n            materialTimePicker.show(supportFragmentManager, \"MATERIAL_TIME_PICKER\")\r\n        }\r\n        // todo: Material time picker code\r\n    }\r\n\r\n    private fun getHourAMPM(hour: Int): Int {\r\n        // Return the hour value for AM PM time format\r\n        var modifiedHour = if (hour > 11) hour - 12 else hour\r\n        if (modifiedHour == 0) {\r\n            modifiedHour = 12\r\n        }\r\n        return modifiedHour\r\n    }\r\n}`\r\n\r\nmodule.exports = {\r\n    MaterialTimePickerActivityXMl: MaterialTimePickerActivityXMl,\r\n    MaterialTimePickerActivityKT: MaterialTimePickerActivityKT\r\n};\r\n","const DownloadAndroidMainfestXMl =\r\n    `<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\r\n    package=\"com.example\">\r\n    <uses-permission android:name=\"android.permission.INTERNET\"/>\r\n    <uses-permission android:name=\"android.permission.READ_EXTERNAL_STORAGE\"/>\r\n    <uses-permission android:name=\"android.permission.WRITE_EXTERNAL_STORAGE\"/>\r\n    <application\r\n        android:allowBackup=\"true\"\r\n        android:icon=\"@mipmap/ic_launcher\"\r\n        android:label=\"@string/app_name\"\r\n        android:roundIcon=\"@mipmap/ic_launcher_round\"\r\n        android:supportsRtl=\"true\"\r\n        android:theme=\"@style/Theme.AllExample\">\r\n        <activity\r\n            android:name=\".MainActivity\"\r\n            android:exported=\"true\" >\r\n            <intent-filter  >\r\n                <action android:name=\"android.intent.action.MAIN\" />\r\n\r\n                <category android:name=\"android.intent.category.LAUNCHER\" />\r\n            </intent-filter>\r\n        </activity>\r\n    </application>\r\n\r\n</manifest>`\r\n\r\nconst DownloadMainActivityXML =\r\n    `<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<androidx.constraintlayout.widget.ConstraintLayout \r\n    xmlns:android=\"http://schemas.android.com/apk/res/android\"\r\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\r\n    xmlns:tools=\"http://schemas.android.com/tools\"\r\n    android:layout_width=\"match_parent\"\r\n    android:layout_height=\"match_parent\"\r\n    tools:context=\".MainActivity\">\r\n\r\n    <com.google.android.material.textfield.TextInputLayout\r\n        android:id=\"@+id/textField\"\r\n        style=\"@style/Widget.MaterialComponents.TextInputLayout.OutlinedBox\"\r\n        android:layout_width=\"match_parent\"\r\n        android:layout_height=\"wrap_content\"\r\n        android:layout_marginStart=\"8dp\"\r\n        android:layout_marginEnd=\"8dp\"\r\n        android:hint=\"Enter the link\"\r\n        app:layout_constraintBottom_toBottomOf=\"parent\"\r\n        app:layout_constraintEnd_toEndOf=\"parent\"\r\n        app:layout_constraintStart_toStartOf=\"parent\"\r\n        app:layout_constraintTop_toTopOf=\"parent\"\r\n        app:layout_constraintVertical_bias=\"0.40\">\r\n\r\n        <com.google.android.material.textfield.TextInputEditText\r\n            android:id=\"@+id/edFileName\"\r\n            android:layout_width=\"match_parent\"\r\n            android:layout_height=\"wrap_content\"\r\n            android:inputType=\"textUri\"\r\n            tools:ignore=\"TextContrastCheck,TextContrastCheck\" />\r\n\r\n    </com.google.android.material.textfield.TextInputLayout>\r\n\r\n    <Button\r\n        android:id=\"@+id/downloadBtn\"\r\n        android:layout_width=\"wrap_content\"\r\n        android:layout_height=\"wrap_content\"\r\n        android:layout_marginTop=\"16dp\"\r\n        android:text=\"download\"\r\n        app:layout_constraintEnd_toEndOf=\"parent\"\r\n        app:layout_constraintStart_toStartOf=\"parent\"\r\n        app:layout_constraintTop_toBottomOf=\"@+id/textField\" />\r\n\r\n</androidx.constraintlayout.widget.ConstraintLayout>`\r\n\r\nconst DownloadMainActivityKT =\r\n    `package com.example\r\n\r\nimport android.Manifest\r\nimport android.app.Activity\r\nimport android.app.DownloadManager\r\nimport android.content.Context\r\nimport android.content.DialogInterface\r\nimport android.content.Intent\r\nimport android.content.pm.PackageManager\r\nimport android.net.Uri\r\nimport android.os.Bundle\r\nimport android.os.Environment\r\nimport android.provider.Settings\r\nimport android.widget.Button\r\nimport android.widget.EditText\r\nimport android.widget.Toast\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport androidx.core.app.ActivityCompat\r\nimport androidx.core.content.ContextCompat\r\nimport com.google.android.material.dialog.MaterialAlertDialogBuilder\r\n\r\nimport java.util.*\r\n\r\n\r\nclass MainActivity : AppCompatActivity() {\r\n    private val permissionsRequest: ArrayList<String> = arrayListOf(\r\n        Manifest.permission.READ_EXTERNAL_STORAGE,\r\n        Manifest.permission.WRITE_EXTERNAL_STORAGE\r\n    )\r\n    private val requestIdMultiplePermissions = 1\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        setContentView(R.layout.activity_main)\r\n\r\n        val edFileName = findViewById<EditText>(R.id.edFileName)\r\n        findViewById<Button>(R.id.downloadBtn).setOnClickListener {\r\n            if (edFileName.text.toString().isNotEmpty()) {\r\n                if (checkMultipleRequestPermissions()) {\r\n                    doOperation()\r\n                    downloadFile(this, Uri.parse(edFileName.text.toString()))\r\n                }\r\n            } else {\r\n                edFileName.error = \"Required\"\r\n            }\r\n        }\r\n    }\r\n\r\n    private fun doOperation() {\r\n        Toast.makeText(this, \"Successfully granted\", Toast.LENGTH_LONG).show()\r\n    }\r\n\r\n    private fun checkMultipleRequestPermissions(): Boolean {\r\n        val listPermissionsNeeded: MutableList<String> = ArrayList()\r\n\r\n        for (p in permissionsRequest) {\r\n            val result = ContextCompat.checkSelfPermission(this, p)\r\n            if (result != PackageManager.PERMISSION_GRANTED) {\r\n                listPermissionsNeeded.add(p)\r\n            }\r\n        }\r\n\r\n        if (listPermissionsNeeded.isNotEmpty()) {\r\n            ActivityCompat.requestPermissions(\r\n                this,\r\n                listPermissionsNeeded.toTypedArray(),\r\n                requestIdMultiplePermissions\r\n            )\r\n            return false\r\n        }\r\n        return true\r\n    }\r\n\r\n    override fun onRequestPermissionsResult(\r\n        requestCode: Int,\r\n        permissions: Array<out String>,\r\n        grantResults: IntArray\r\n    ) {\r\n        super.onRequestPermissionsResult(requestCode, permissions, grantResults)\r\n        if (requestCode == requestIdMultiplePermissions) {\r\n            if (grantResults.isNotEmpty()) {\r\n                var isGrant = true\r\n                for (element in grantResults) {\r\n                    if (element == PackageManager.PERMISSION_DENIED) {\r\n                        isGrant = false\r\n                    }\r\n                }\r\n                if (isGrant) {\r\n                    doOperation()\r\n                } else {\r\n                    var someDenied = false\r\n                    for (permission in permissions) {\r\n                        if (!ActivityCompat.shouldShowRequestPermissionRationale(\r\n                                this,\r\n                                permission\r\n                            )\r\n                        ) {\r\n                            if (ActivityCompat.checkSelfPermission(\r\n                                    this,\r\n                                    permission\r\n                                ) == PackageManager.PERMISSION_DENIED\r\n                            ) {\r\n                                someDenied = true\r\n                            }\r\n                        }\r\n                    }\r\n                    if (someDenied) {\r\n                        settingActivityOpen(this)\r\n                    } else {\r\n                        showDialogOK(this) { _: DialogInterface?, which: Int ->\r\n                            when (which) {\r\n                                DialogInterface.BUTTON_POSITIVE -> checkMultipleRequestPermissions()\r\n                                DialogInterface.BUTTON_NEGATIVE -> {\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private fun settingActivityOpen(activity: Activity) {\r\n        Toast.makeText(\r\n            activity,\r\n            \"Go to settings and enable permissions\",\r\n            Toast.LENGTH_LONG\r\n        )\r\n            .show()\r\n        val i = Intent()\r\n        i.action = Settings.ACTION_APPLICATION_DETAILS_SETTINGS\r\n        i.addCategory(Intent.CATEGORY_DEFAULT)\r\n        val packageName = activity.packageName\r\n        i.data = Uri.parse(\"package:$packageName\")\r\n        i.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK)\r\n        i.addFlags(Intent.FLAG_ACTIVITY_NO_HISTORY)\r\n        i.addFlags(Intent.FLAG_ACTIVITY_EXCLUDE_FROM_RECENTS)\r\n        activity.startActivity(i)\r\n    }\r\n\r\n    private fun showDialogOK(activity: Activity, okListener: DialogInterface.OnClickListener) {\r\n        MaterialAlertDialogBuilder(activity)\r\n            .setMessage(\"All Permission required for this app\")\r\n            .setPositiveButton(\"OK\", okListener)\r\n            .setNegativeButton(\"Cancel\", okListener)\r\n            .create()\r\n            .show()\r\n    }\r\n\r\n    private fun downloadFile(context: Context, url: Uri) {\r\n        val downloadManager = context.getSystemService(Context.DOWNLOAD_SERVICE) as DownloadManager\r\n        val request = DownloadManager.Request(url)\r\n        request.setAllowedNetworkTypes(DownloadManager.Request.NETWORK_MOBILE or DownloadManager.Request.NETWORK_WIFI)\r\n        request.setNotificationVisibility(DownloadManager.Request.VISIBILITY_VISIBLE_NOTIFY_COMPLETED)\r\n        request.setDestinationInExternalPublicDir(\r\n            Environment.DIRECTORY_DOWNLOADS,\r\n            url.lastPathSegment\r\n        )\r\n        downloadManager.enqueue(request)\r\n    }\r\n\r\n}`\r\n\r\nmodule.exports = {\r\n    DownloadAndroidMainfestXMl: DownloadAndroidMainfestXMl,\r\n    DownloadMainActivityXML: DownloadMainActivityXML,\r\n    DownloadMainActivityKT: DownloadMainActivityKT\r\n};","const SCPMainActivityXML =\r\n    `<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<androidx.constraintlayout.widget.ConstraintLayout \r\n    xmlns:android=\"http://schemas.android.com/apk/res/android\"\r\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\r\n    xmlns:tools=\"http://schemas.android.com/tools\"\r\n    android:layout_width=\"match_parent\"\r\n    android:layout_height=\"match_parent\"\r\n    tools:context=\".MainActivity\">\r\n\r\n    <com.google.android.material.textfield.TextInputLayout\r\n        android:id=\"@+id/textField\"\r\n        style=\"@style/Widget.MaterialComponents.TextInputLayout.OutlinedBox\"\r\n        android:layout_width=\"match_parent\"\r\n        android:layout_height=\"wrap_content\"\r\n        android:layout_marginStart=\"8dp\"\r\n        android:layout_marginEnd=\"8dp\"\r\n        android:hint=\"enter the text\"\r\n        app:layout_constraintBottom_toBottomOf=\"parent\"\r\n        app:layout_constraintEnd_toEndOf=\"parent\"\r\n        app:layout_constraintStart_toStartOf=\"parent\"\r\n        app:layout_constraintTop_toTopOf=\"parent\"\r\n        app:layout_constraintVertical_bias=\"0.40\">\r\n\r\n        <com.google.android.material.textfield.TextInputEditText\r\n            android:id=\"@+id/edFileName\"\r\n            android:layout_width=\"match_parent\"\r\n            android:layout_height=\"wrap_content\"\r\n            android:inputType=\"textUri\"\r\n            tools:ignore=\"TextContrastCheck\" />\r\n\r\n    </com.google.android.material.textfield.TextInputLayout>\r\n\r\n    <LinearLayout\r\n        android:layout_width=\"match_parent\"\r\n        android:layout_height=\"wrap_content\"\r\n        android:orientation=\"horizontal\"\r\n        app:layout_constraintEnd_toEndOf=\"parent\"\r\n        app:layout_constraintStart_toStartOf=\"parent\"\r\n        app:layout_constraintTop_toBottomOf=\"@+id/textField\">\r\n\r\n        <Button\r\n            android:id=\"@+id/shareDataBtn\"\r\n            style=\"?android:attr/buttonBarStyle\"\r\n            android:layout_width=\"match_parent\"\r\n            android:layout_height=\"match_parent\"\r\n            android:layout_margin=\"8dp\"\r\n            android:layout_weight=\"1\"\r\n            android:text=\"share\" />\r\n\r\n        <Button\r\n            android:id=\"@+id/copyDataBtn\"\r\n            style=\"?android:attr/buttonBarStyle\"\r\n            android:layout_width=\"match_parent\"\r\n            android:layout_height=\"match_parent\"\r\n            android:layout_margin=\"8dp\"\r\n            android:layout_weight=\"1\"\r\n            android:text=\"copy\" />\r\n\r\n        <Button\r\n            android:id=\"@+id/pasteDataBtn\"\r\n            style=\"?android:attr/buttonBarStyle\"\r\n            android:layout_width=\"match_parent\"\r\n            android:layout_height=\"match_parent\"\r\n            android:layout_margin=\"8dp\"\r\n            android:layout_weight=\"1\"\r\n            android:text=\"paste\" />\r\n\r\n    </LinearLayout>\r\n</androidx.constraintlayout.widget.ConstraintLayout>`\r\n\r\nconst SCPMainActivityKT =\r\n    `package com.example\r\n\r\n\r\nimport android.content.ClipData\r\nimport android.content.ClipboardManager\r\nimport android.content.Context\r\nimport android.content.Intent\r\nimport android.os.Bundle\r\nimport android.widget.Button\r\nimport android.widget.EditText\r\nimport android.widget.Toast\r\nimport androidx.appcompat.app.AppCompatActivity\r\n\r\n\r\nclass MainActivity : AppCompatActivity() {\r\n    private lateinit var edFileName: EditText\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        setContentView(R.layout.activity_main)\r\n        edFileName = findViewById(R.id.edFileName)\r\n\r\n        // todo: share text\r\n        findViewById<Button>(R.id.shareDataBtn).setOnClickListener {\r\n            if (edFileName.text.isNotEmpty()) {\r\n                shareText(this, edFileName.text.toString())\r\n            } else {\r\n                edFileName.error = \"Required for share and copy\"\r\n            }\r\n        }\r\n        // todo: share text\r\n\r\n        // todo: copy text\r\n        findViewById<Button>(R.id.copyDataBtn).setOnClickListener {\r\n            if (edFileName.text.isNotEmpty()) {\r\n                copyToClipBoard(\r\n                    this,\r\n                    edFileName.text.toString()\r\n                )\r\n                Toast.makeText(this, \"copied\", Toast.LENGTH_LONG).show()\r\n            } else {\r\n                edFileName.error = \"Required for share and copy\"\r\n            }\r\n        }\r\n        // todo: copy text\r\n\r\n        // todo: paste text\r\n        findViewById<Button>(R.id.pasteDataBtn).setOnClickListener {\r\n            edFileName.setText(pasteFromClipBoard(this))\r\n            Toast.makeText(this, \"Pasted\", Toast.LENGTH_LONG).show()\r\n        }\r\n        // todo: paste text\r\n\r\n    }\r\n\r\n    private fun copyToClipBoard(context: Context, text: String) {\r\n        val clipboard = context.getSystemService(CLIPBOARD_SERVICE) as ClipboardManager\r\n        val clip = ClipData.newPlainText(\"Copied Text\", text)\r\n        clipboard.setPrimaryClip(clip)\r\n    }\r\n\r\n    private fun shareText(context: Context, text: String) {\r\n        val intent = Intent(Intent.ACTION_SEND)\r\n        intent.type = \"text/plain\"\r\n        intent.putExtra(Intent.EXTRA_TEXT, text)\r\n        context.startActivity(Intent.createChooser(intent, \"Share\"))\r\n    }\r\n\r\n    private fun pasteFromClipBoard(context: Context): String {\r\n        val clipboard = context.getSystemService(CLIPBOARD_SERVICE) as ClipboardManager\r\n        return clipboard.primaryClip!!.getItemAt(0).text.toString()\r\n    }\r\n}`\r\n\r\nmodule.exports = { SCPMainActivityXML: SCPMainActivityXML, SCPMainActivityKT: SCPMainActivityKT };\r\n","const SBMActivityXML =\r\n    `<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<androidx.constraintlayout.widget.ConstraintLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\r\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\r\n    xmlns:tools=\"http://schemas.android.com/tools\"\r\n    android:layout_width=\"match_parent\"\r\n    android:layout_height=\"match_parent\"\r\n    tools:context=\".MainActivity\">\r\n\r\n    <androidx.recyclerview.widget.RecyclerView\r\n        android:layout_width=\"match_parent\"\r\n        android:layout_height=\"wrap_content\"\r\n        tools:listitem=\"@layout/item_layout\"\r\n        android:id=\"@+id/recycler_view\"\r\n        app:layoutManager=\"androidx.recyclerview.widget.LinearLayoutManager\"\r\n        android:orientation=\"vertical\"\r\n        app:layout_constraintLeft_toLeftOf=\"parent\"\r\n        app:layout_constraintRight_toRightOf=\"parent\"\r\n        app:layout_constraintTop_toTopOf=\"parent\" />\r\n</androidx.constraintlayout.widget.ConstraintLayout>`\r\n\r\nconst item_layout =\r\n    `<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<androidx.constraintlayout.widget.ConstraintLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\r\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\r\n    android:layout_width=\"match_parent\"\r\n    android:layout_height=\"wrap_content\"\r\n    android:layout_margin=\"4dp\"\r\n    android:background=\"?attr/selectableItemBackground\"\r\n    android:elevation=\"6dp\">\r\n\r\n    <androidx.cardview.widget.CardView\r\n        android:id=\"@+id/cardview\"\r\n        android:layout_width=\"0dp\"\r\n        android:layout_height=\"wrap_content\"\r\n        android:layout_alignParentEnd=\"true\"\r\n        app:cardCornerRadius=\"5dp\"\r\n        app:cardUseCompatPadding=\"true\"\r\n        app:layout_constraintBottom_toBottomOf=\"parent\"\r\n        app:layout_constraintEnd_toEndOf=\"parent\"\r\n        app:layout_constraintStart_toStartOf=\"parent\"\r\n        app:layout_constraintTop_toTopOf=\"parent\">\r\n\r\n        <LinearLayout\r\n            android:id=\"@+id/layout_click\"\r\n            android:layout_width=\"match_parent\"\r\n            android:layout_height=\"wrap_content\"\r\n            app:layout_constraintEnd_toEndOf=\"parent\"\r\n            app:layout_constraintStart_toStartOf=\"parent\"\r\n            app:layout_constraintTop_toTopOf=\"parent\">\r\n\r\n            <TextView\r\n                android:id=\"@+id/srNo\"\r\n                android:layout_width=\"wrap_content\"\r\n                android:layout_height=\"wrap_content\"\r\n                android:padding=\"8dp\"\r\n                android:text=\"sr No\"\r\n                android:textSize=\"16sp\"\r\n                android:textStyle=\"bold\" />\r\n\r\n            <TextView\r\n                android:id=\"@+id/part_name\"\r\n                android:layout_width=\"0dp\"\r\n                android:layout_height=\"wrap_content\"\r\n                android:layout_weight=\"1\"\r\n                android:padding=\"8dp\"\r\n                android:text=\"enter the name\"\r\n                android:textSize=\"16sp\"\r\n                android:textStyle=\"bold\" />\r\n\r\n        </LinearLayout>\r\n    </androidx.cardview.widget.CardView>\r\n\r\n</androidx.constraintlayout.widget.ConstraintLayout>`\r\n\r\nconst item_model =\r\n    `package com.example\r\n\r\nclass ItemModel(private var name:String) {\r\n\r\n    fun setName(name: String) {\r\n        this.name = name\r\n    }\r\n    fun getName():String{\r\n        return name\r\n    }\r\n}`\r\n\r\nconst item_adapter =\r\n    `package com.example\r\n\r\nimport android.view.LayoutInflater\r\nimport android.view.View\r\nimport android.view.ViewGroup\r\nimport android.widget.TextView\r\nimport androidx.recyclerview.widget.RecyclerView\r\nimport java.util.ArrayList\r\n\r\nclass ItemAdapter(private var itemList: ArrayList<ItemModel>) :\r\n    RecyclerView.Adapter<ItemAdapter.ViewHolder>() {\r\n\r\n\r\n    class ViewHolder(ItemView: View) : RecyclerView.ViewHolder(ItemView) {\r\n        val srNo: TextView = itemView.findViewById(R.id.srNo)\r\n        val nameTxt: TextView = itemView.findViewById(R.id.part_name)\r\n   }\r\n\r\n    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): ViewHolder {\r\n        val view: View =\r\n            LayoutInflater.from(parent.context).inflate(R.layout.item_layout, parent, false)\r\n        return ViewHolder(view)\r\n    }\r\n\r\n    override fun onBindViewHolder(holder: ViewHolder, position: Int) {\r\n        holder.srNo.text = (position + 1).toString()\r\n        holder.nameTxt.text = itemList[position].getName()\r\n    }\r\n\r\n    override fun getItemCount(): Int {\r\n        return itemList.size\r\n    }\r\n}`\r\n\r\nconst SBMActivityKIT =\r\n    `package com.example\r\n\r\n\r\nimport android.annotation.SuppressLint\r\nimport android.os.Bundle\r\nimport android.view.Menu\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport androidx.appcompat.widget.SearchView\r\nimport androidx.recyclerview.widget.RecyclerView\r\nimport java.util.*\r\nimport kotlin.collections.ArrayList\r\n\r\n\r\nclass MainActivity : AppCompatActivity() {\r\n    private lateinit var arrayList: ArrayList<ItemModel>\r\n    private lateinit var adapter: ItemAdapter\r\n    private lateinit var recyclerView: RecyclerView\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        setContentView(R.layout.activity_main)\r\n\r\n        recyclerView = findViewById(R.id.recycler_view)\r\n        arrayList = ArrayList()\r\n        arrayList.add(ItemModel(\"Meet\"))\r\n        arrayList.add(ItemModel(\"Ankit\"))\r\n        arrayList.add(ItemModel(\"Rushil\"))\r\n        arrayList.add(ItemModel(\"Abhishek\"))\r\n        arrayList.add(ItemModel(\"Modi\"))\r\n        arrayList.add(ItemModel(\"Ghree\"))\r\n        arrayList.add(ItemModel(\"Kirtan\"))\r\n        arrayList.add(ItemModel(\"Ankita\"))\r\n        arrayList.add(ItemModel(\"Soham\"))\r\n        arrayList.add(ItemModel(\"Ganesh\"))\r\n        arrayList.add(ItemModel(\"Dixit\"))\r\n        arrayList.add(ItemModel(\"Ankash\"))\r\n        arrayList.add(ItemModel(\"Parth\"))\r\n        arrayList.add(ItemModel(\"Pranav\"))\r\n        arrayList.add(ItemModel(\"Ankit Sir\"))\r\n        arrayList.add(ItemModel(\"Priya Mem\"))\r\n        arrayList.add(ItemModel(\"Jinal Mem\"))\r\n        arrayList.add(ItemModel(\"Bhumi\"))\r\n        arrayList.add(ItemModel(\"Nidhi\"))\r\n        arrayList.add(ItemModel(\"Hardik\"))\r\n        arrayList.add(ItemModel(\"Mayank\"))\r\n        arrayList.add(ItemModel(\"Kaushik\"))\r\n        arrayList.add(ItemModel(\"Rinku\"))\r\n        arrayList.add(ItemModel(\"Mom\"))\r\n        adapter = ItemAdapter(arrayList)\r\n\r\n        recyclerView.adapter = adapter\r\n    }\r\n\r\n    override fun onCreateOptionsMenu(menu: Menu): Boolean {\r\n        menuInflater.inflate(R.menu.search_menu, menu)\r\n        val search = menu.findItem(R.id.app_bar_search)\r\n\r\n        val searchView = search.actionView as SearchView\r\n        searchView.maxWidth = android.R.attr.width\r\n        searchView.queryHint = \"Search\"\r\n        searchView.setOnQueryTextListener(object : SearchView.OnQueryTextListener {\r\n            override fun onQueryTextSubmit(query: String?): Boolean {\r\n                return false\r\n            }\r\n\r\n            @SuppressLint(\"NotifyDataSetChanged\")\r\n            override fun onQueryTextChange(newText: String?): Boolean {\r\n                val checkItemModelArrayList: ArrayList<ItemModel> = ArrayList()\r\n\r\n                for (i in arrayList) {\r\n                    if (i.getName().lowercase(Locale.getDefault()).contains(\r\n                            newText!!.lowercase(Locale.getDefault())\r\n                        )\r\n                    ) {\r\n                        checkItemModelArrayList.add(i)\r\n                    }\r\n                }\r\n                adapter = ItemAdapter(checkItemModelArrayList)\r\n\r\n                recyclerView.adapter = adapter\r\n                adapter.notifyDataSetChanged()\r\n                return true\r\n            }\r\n        })\r\n\r\n        return super.onCreateOptionsMenu(menu)\r\n    }\r\n}`\r\n\r\nconst SBMenuXML =\r\n    `<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<menu xmlns:android=\"http://schemas.android.com/apk/res/android\"\r\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\">\r\n    <item\r\n        android:id=\"@+id/app_bar_search\"\r\n        android:icon=\"@drawable/ic_search_black_24dp\"\r\n        android:title=\"Search\"\r\n        app:showAsAction=\"ifRoom|withText\"\r\n        app:actionViewClass=\"androidx.appcompat.widget.SearchView\"/>\r\n</menu>`\r\n\r\n\r\nmodule.exports = {\r\n    SBMActivityXML: SBMActivityXML, SBMenuXML: SBMenuXML,\r\n    item_layout: item_layout,\r\n    item_model: item_model,\r\n    item_adapter: item_adapter,\r\n    SBMActivityKIT: SBMActivityKIT,\r\n};\r\n","import React from 'react'\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport { sourceCodeList } from \"../config/constant\";\r\nexport default function Home() {\r\n    const componentBlock = (element, index) => {\r\n        return (\r\n            <div key={index}>\r\n                <div className=\"card text-center border-dark h-100\">\r\n                    <h5 className=\"card-header\">{element.component_name}</h5>\r\n                    <div className=\"card-body\">\r\n                        <p className=\"card-text\">{element.description}</p>\r\n                        <Link to={element.path} className=\"btn btn-primary\">View Code</Link>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n    return (\r\n        <div className='container my-2'>\r\n            <h2 className='text-center'>Component</h2>\r\n            <div className=\"row-1\">\r\n                {sourceCodeList.map((elements, index) => {\r\n                    return (\r\n                        elements.type ? (\r\n                            <>\r\n                                <h2 className='mt-4'>{elements.typeName}:</h2>\r\n                                <div className=\"row row-cols-1 row-cols-md-2 g-4\">\r\n                                    {elements.subs.map((element, indexs) =>\r\n                                        componentBlock(element, indexs))\r\n                                    }\r\n                                </div>\r\n                            </>\r\n                        ) : (\r\n                            <>\r\n                                <h2 className='mt-3'>{elements.component_name}:</h2>\r\n                                <div className=\"row row-cols-1 row-cols-md-2 g-4\">\r\n\r\n                                    {componentBlock(elements, index)\r\n                                    }</div>\r\n                            </>\r\n                        )\r\n                    )\r\n                })}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React, { useState } from \"react\";\r\nimport { Link, useLocation } from \"react-router-dom\";\r\nimport { sourceCodeList } from \"../config/constant\";\r\nexport default function NavBar(props) {\r\n    let location = useLocation();\r\n\r\n    const [filteredData, setFilteredData] = useState([]);\r\n    const [wordEntered, setWordEntered] = useState(\"\");\r\n\r\n    const handleFilter = (event) => {\r\n        const searchWord = event.target.value;\r\n        setWordEntered(searchWord);\r\n        const listD = []\r\n        sourceCodeList.forEach((elements, index) => {\r\n            if (elements.type) {\r\n                elements.subs.forEach((element, indexs) => {\r\n                    listD.push(element)\r\n                })\r\n            } else {\r\n                listD.push(elements)\r\n            }\r\n        })\r\n        const newFilter = listD.filter((value) => {\r\n            return value.component_name\r\n                .toLowerCase()\r\n                .includes(searchWord.toLowerCase());\r\n        });\r\n        if (searchWord === \"\") {\r\n            setFilteredData([]);\r\n        } else {\r\n            setFilteredData(newFilter);\r\n        }\r\n    };\r\n\r\n    const clearInput = () => {\r\n        setFilteredData([]);\r\n        setWordEntered(\"\");\r\n    };\r\n\r\n    return (\r\n        <div className=\"row sticky-top\">\r\n            <nav className=\"navbar navbar-expand-lg navbar-dark bg-dark\">\r\n                {/* <!-- ======= Mobile nav toggle button ======= --> */}\r\n                <button\r\n                    //className=\"btn mobile-nav-toggle d-xl-none mx-1\"\r\n                    className=\"btn mx-3\"\r\n                    style={{\r\n                        backgroundColor: \"dark\",\r\n                        color: \"white\",\r\n                        fontSize: \"22px\",\r\n                    }}\r\n                    onClick={\r\n                        props.showSidebar\r\n                    }\r\n                >\r\n                    <i className=\"fa fa-bars \"></i>\r\n                </button>\r\n                <div className=\"container\">\r\n                    <div>\r\n                        <Link className=\"h3 fw-bold font-monospace text-decoration-none \" style={{\r\n                            color: \"white\",\r\n                        }} to=\"/\">\r\n                            Android Addict\r\n                        </Link>\r\n                    </div>\r\n                    <form className=\"d-flex\" style={{\r\n                        float: \"right\"\r\n                    }}>\r\n\r\n                        <div className=\"container\" >\r\n                            <input\r\n                                className=\"form-control me-2\"\r\n                                type=\"search\"\r\n                                placeholder=\"Search\"\r\n                                aria-label=\"Search\"\r\n                                value={wordEntered}\r\n                                onChange={handleFilter}\r\n                            />\r\n                            {filteredData.length > 0 && (\r\n                                <div\r\n                                    className=\"searchInputs\"\r\n                                    style={{\r\n                                        position: \"absolute\",\r\n                                        backgroundColor: \"black\",\r\n                                        width: \"220px\",\r\n                                        // height: \"200px\",\r\n                                        // overflowY: \"scroll\",\r\n                                    }}\r\n                                >\r\n                                    {filteredData.map((value, key) => {\r\n                                        return (\r\n                                            <Link\r\n                                                to={value.path}\r\n                                                className={`nav-link ${location.pathname === value.path\r\n                                                    ? \"bg-dark\"\r\n                                                    : \"text-white\"\r\n                                                    }`}\r\n                                                onClick={clearInput}\r\n                                            >\r\n                                                {value.component_name}\r\n                                            </Link>\r\n                                        );\r\n                                    })}\r\n                                </div>\r\n                            )}\r\n                        </div>\r\n                    </form>\r\n                </div>\r\n            </nav>\r\n        </div>\r\n    );\r\n}\r\n","import { Link, useLocation } from \"react-router-dom\";\r\nimport { sourceCodeList } from '../config/constant'\r\nexport default function SideBar() {\r\n    let location = useLocation();\r\n    return (\r\n        <>\r\n            <div className=\"p-2 text-white fixed sideColor\" style={{\r\n                width: \"240px\",\r\n                height: \"100%\",\r\n                position: \" fixed\",\r\n                zIndex: \"1\",\r\n                overflowX: \"hidden\",\r\n            }}>\r\n\r\n                <ul className=\"nav nav-pills flex-column mb-auto mx-2\" style={{\r\n                    paddingBottom: \"100px\"\r\n                }}>\r\n                    {sourceCodeList.map((elements, index) => {\r\n                        return (\r\n                            elements.type ? (\r\n                                <>\r\n                                    <button className=\"btn nav-item text-start collapsed text-white my-2\" data-bs-toggle=\"collapse\"\r\n                                        data-bs-target={`#${elements.typeId}-collapse`} aria-expanded=\"true\">\r\n                                        {elements.typeName}\r\n                                        <i className=\"bi bi-caret-down-fill pull-right\"></i>\r\n                                    </button>\r\n                                    <div className=\"collapse\" id={`${elements.typeId}-collapse`}>\r\n                                        <ul className=\"btn-toggle-nav list-group\" style={{\r\n                                            listStyle: \"none\"\r\n                                        }}>\r\n                                            {elements.subs.map((element, indexs) =>\r\n                                                <li className=\"nav-item mb-2\" >\r\n                                                    <Link key={indexs} to={element.path} className={`nav-link ${location.pathname === element.path ? 'active bg-dark' : \"text-white\"}`} >\r\n                                                        <i class=\"bi bi-caret-right-fill\"></i>\r\n                                                        {element.component_name}\r\n                                                    </Link>\r\n                                                </li>\r\n                                            )}\r\n                                        </ul>\r\n                                    </div>\r\n                                </>\r\n                            ) : (\r\n                                <li className=\"nav-item mb-3\" >\r\n                                    <Link key={index} to={elements.path} className={`nav-link ${location.pathname === elements.path ? 'active bg-dark' : \"text-white\"}`} >\r\n                                        {elements.component_name}\r\n                                    </Link>\r\n                                </li>\r\n                            )\r\n                        )\r\n\r\n                    })}\r\n                </ul>\r\n\r\n\r\n            </div>\r\n        </>\r\n    )\r\n}","import React from \"react\";\r\n\r\nimport styled from \"styled-components\";\r\nimport Highlight, { defaultProps } from \"prism-react-renderer\";\r\nimport dracula from 'prism-react-renderer/themes/oceanicNext';\r\n\r\nexport default function OneComponetSC(props) {\r\n    const fileCode = props.fileCode;\r\n\r\n    const Pre = styled.pre`\r\n      text-align: left;\r\n      margin: 1em 0;\r\n      padding: 0.5em;\r\n      overflow: scroll;\r\n    \r\n      & .token-line {\r\n        line-height: 1.3em;\r\n        height: 1.3em;\r\n      }\r\n    `;\r\n\r\n    const Line = styled.div`\r\n      display: table-row;\r\n    `;\r\n\r\n    const LineNo = styled.span`\r\n      display: table-cell;\r\n      text-align: right;\r\n      padding-right: 1em;\r\n      user-select: none;\r\n      opacity: 0.5;\r\n    `;\r\n\r\n    const LineContent = styled.span`\r\n      display: table-cell;\r\n    `;\r\n    function CopyToClipboard() {\r\n        navigator.clipboard.writeText(fileCode)\r\n\r\n    }\r\n    return (\r\n        <>\r\n            <h5>{props.fileName}:</h5>\r\n\r\n            <Highlight {...defaultProps} theme={dracula} code={props.fileCode} language={props.fileType}>\r\n                {({ className, style, tokens, getLineProps, getTokenProps }) => (\r\n                    <Pre className={className} style={style}>\r\n                        <button onClick={() => { CopyToClipboard() }}>Copy</button>\r\n\r\n                        {tokens.map((line, i) => (\r\n                            <Line key={i} {...getLineProps({ line, key: i })}>\r\n                                <LineNo>{i + 1}</LineNo>\r\n                                <LineContent>\r\n\r\n                                    {line.map((token, key) => (\r\n                                        <span key={key} {...getTokenProps({ token, key })} />\r\n                                    ))}\r\n                                </LineContent>\r\n                            </Line>\r\n                        ))}\r\n                    </Pre>\r\n                )}\r\n            </Highlight>\r\n        </>\r\n\r\n    )\r\n}\r\n","import React from 'react'\r\nimport OneComponetSC from './OneComponetSC';\r\nexport default function Sourcecode(props) {\r\n    window.scrollTo(0, 0);\r\n    const element = props.element;\r\n    return (\r\n        <div className=\"container my-4\">\r\n            <h2><b>{element.component_name}:</b></h2>\r\n            {element.description !== null && (\r\n                <h6>{element.description}</h6>)}\r\n            {element.youtube_short_url !== null && (\r\n                <iframe title={element.component_name} width=\"100%\" style={{ height: \"75vh\" }} src={element.youtube_short_url}></iframe>\r\n            )}\r\n            {element.fileCode.length > 0 && element.fileCode.map((elements, index) => {\r\n                return (\r\n                    <OneComponetSC fileType={element.fileType[index]} fileName={element.fileName[index]} fileCode={elements} />)\r\n            })}\r\n            <h3>Video:</h3>\r\n            {element.youtube_url === null ? (\r\n                <h5>Coming Soon</h5>\r\n            ) : (\r\n                <iframe title={element.component_name} width=\"100%\" style={{ height: \"75vh\" }} frameBorder=\"0\"\r\n                    allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\r\n                    allowFullScreen src={element.youtube_url}></iframe>\r\n            )}\r\n\r\n\r\n        </div>\r\n    )\r\n}\r\n","import React, { useState } from \"react\";\nimport {\n  HashRouter as Router,\n  Switch,\n  Route,\n} from \"react-router-dom\";\nimport Home from \"./Components/Home\";\nimport NavBar from './Components/NavBar';\nimport SideBar from \"./Components/SideBar\";\nimport Sourcecode from \"./Components/Sourcecode\";\nimport { sourceCodeList } from \"./config/constant\";\nfunction App() {\n  const [sidebar, setSidebar] = useState(false);\n  const showSidebar = () => {\n    setSidebar(!sidebar);\n  };\n  return (\n    <>\n      <Router basename=\"/\">\n        <NavBar showSidebar={showSidebar} />\n        <div className=\"row\">\n          {sidebar && (\n            <div className=\"col-2\">\n              <SideBar />\n            </div>\n          )}\n          <div className={`col-${sidebar\n            ? \"10\"\n            : \"12\"\n            }`}>\n            <Switch>\n              {sourceCodeList.map((elements, index) => {\n                return (\n                  elements.type ? (\n\n                    elements.subs.map((element, indexs) =>\n                      <Route path={element.path}>\n                        <Sourcecode element={element} key={indexs} />\n                      </Route>\n\n                    )\n\n                  ) : (\n                    <Route path={elements.path}>\n                      <Sourcecode element={elements} key={index} />\n                    </Route>\n                  ))\n              })}\n              <Route exact path=\"/\">\n                <Home />\n              </Route>\n            </Switch>\n          </div>\n        </div>\n\n      </Router>\n\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}