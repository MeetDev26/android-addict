(this["webpackJsonpall-component-app"]=this["webpackJsonpall-component-app"]||[]).push([[0],[,,,,,,,,function(t,n,e){var a=e(33),i=a.permissionMainfestsXml,o=a.singlePermissionXMl,r=a.singlePermissionKt,d=a.permissionMethod,s=a.permissionStr,l=e(34),p=l.multiplAndroidManinfestXml,c=l.multipleActivtyXMl,m=l.multipleString,u=l.multiplePermissionMethod,y=l.multiplePermissionActivity,h=e(35),g=h.dialogActivtyXMl,_=h.layout_progress,x=h.progressActivityKt,v=h.layout_loading,f=h.loadingActivityKt,w=h.alertActivityKt,A=h.materialAlertActivityKt,T=h.materialThemeDialogActivityKt,C=h.customeDialogActivityKt,I=e(36),L=I.installedActivityXML,k=I.layout_installed_apps,S=I.installedLayoutLoadingXml,O=I.installedString,M=I.search_menuXml,b=I.appModel,N=I.appAdapter,B=I.installedActivityKt,D=e(37),P=D.ThemeColorXML,R=D.ThemeLightXML,E=D.ThemeDarkXML,V=D.ThemeActiviyMainXML,j=D.ThemeMainActivityKt,F=D.ThemeSplashXML,G=D.ThemeSplashActivityKt,H=D.ThemeAndroidMainfest,q=e(38),K=q.SimpleDatePickerActivityXMl,X=q.SimpleDatePickerActivityKT,U=e(39),Y=U.MaterialDatePickerActivityXMl,W=U.MaterialDatePickerActivityKT,z=e(40),Q=z.SimpleTimePickerActivityXMl,J=z.SimpleTimePickerActivityKT,$=e(41),Z=$.MaterialTimePickerActivityXMl,tt=$.MaterialTimePickerActivityKT,nt=e(42),et=nt.DownloadAndroidMainfestXMl,at=nt.DownloadMainActivityXML,it=nt.DownloadMainActivityKT,ot=e(43),rt=ot.SCPMainActivityXML,dt=ot.SCPMainActivityKT,st=e(44),lt=st.SBMActivityXML,pt=st.item_layout,ct=st.item_model,mt=st.item_adapter,ut=st.SBMActivityKIT,yt="AndroidManifest.xml",ht="string.xml",gt="xml",_t="jsx",xt="activity_main.xml",vt="MainActivity.kt",ft=[{id:"1",type:!0,typeId:"permission",typeName:"Permission",subs:[{id:"1",component_name:"Single Run-time Pemission",path:"/single-run-time-permission",description:"Runtime permissions give your app additional access to restricted data, and they allow your app to perform restricted actions that more substantially affect the system and other apps.Many runtime permissions access private user data, a special type of restricted data that includes potentially sensitive information. Examples of private user data include location and contact information. ",youtube_short_url:null,youtube_url:null,fileName:[yt,xt,ht,"Permission.kt",vt],fileType:[gt,gt,gt,_t,_t],fileCode:[i,o,s,d,r]},{id:"2",component_name:"Multiple Run-time Permission",path:"/multiple-run-time-permission",description:"To request Multiple Runtime Permissions in our application. This type of request can be made through various types of application who wanted to access different type of content after accessing user permission.",youtube_short_url:null,youtube_url:null,fileName:[yt,xt,ht,"Permission.kt",vt],fileType:[gt,gt,gt,_t,_t],fileCode:[p,c,m,u,y]}]},{id:"2",type:!0,typeId:"dialog",typeName:"Dialog",subs:[{id:"1",component_name:"Progress Dialog",path:"/progress-dialog",description:"A dialog showing a progress indicator and an optional text message or view. Only a text message or a view can be used at the same time.",youtube_short_url:null,youtube_url:null,fileName:[xt,"layout_progress.xml",vt],fileType:[gt,gt,_t],fileCode:[g,_,x]},{id:"2",component_name:"Loading Dialog",path:"/loading-dialog",description:"A dialog showing a progress indicator and an optional text message or view. Only a text message or a view can be used at the same time.",youtube_short_url:null,youtube_url:null,fileName:[xt,"layout_loading.xml",vt],fileType:[gt,gt,_t],fileCode:[g,v,f]},{id:"3",component_name:"Alert Dialog",path:"/alert-dialog",description:"AlertDialog can be used to display the dialog message with OK and Cancel buttons. It can be used to interrupt and ask the user about his/her choice to continue or discontinue.",youtube_short_url:null,youtube_url:null,fileName:[xt,vt],fileType:[gt,_t],fileCode:[g,w]},{id:"4",component_name:"Material Alert Dialog",path:"/material-alert-dialog",description:null,youtube_short_url:null,youtube_url:null,fileName:[xt,vt],fileType:[gt,_t],fileCode:[g,A]},{id:"5",component_name:"Material Theme Dialog",path:"/material-theme-dialog",description:null,youtube_short_url:null,youtube_url:null,fileName:[xt,vt],fileType:[gt,_t],fileCode:[g,T]},{id:"6",component_name:"Custom Dialog",path:"/custom-dialog",description:null,youtube_short_url:null,youtube_url:null,fileName:[xt,vt],fileType:[gt,_t],fileCode:[g,C]}]},{id:"3",type:!1,component_name:"Display Installed Apps",path:"/display-installed-apps",description:null,youtube_short_url:null,youtube_url:null,fileName:[xt,"layout_installed_app.xml",ht,"layout_loading.xml","search_menu.xml","AppModel.kt","AppAdapter.kt",vt],fileType:[gt,gt,gt,gt,gt,_t,_t,_t],fileCode:[L,k,S,O,M,b,N,B]},{id:"4",type:!1,component_name:"Theme",path:"/theme",description:null,youtube_short_url:null,youtube_url:null,fileName:["color.xml","themes.xml(light)","themes.xml(night)",xt,vt,"activity_splash.xml","SplashActivity.kt",yt],fileType:[gt,gt,gt,gt,_t,gt,_t,gt],fileCode:[P,R,E,V,j,F,G,H]},{id:"5",type:!0,typeId:"datePicker",typeName:"Date Picker",subs:[{id:"1",component_name:"Simple Date Picker",path:"/simple-date-picker",description:null,youtube_short_url:null,youtube_url:null,fileName:[xt,vt],fileType:[gt,_t],fileCode:[K,X]},{id:"2",component_name:"Material Date Picker",path:"/material-date-picker",description:null,youtube_short_url:null,youtube_url:null,fileName:[xt,vt],fileType:[gt,_t],fileCode:[Y,W]}]},{id:"6",type:!0,typeId:"timePicker",typeName:"Time Picker",subs:[{id:"1",component_name:"Simple Time Picker",path:"/simple-time-picker",description:null,youtube_short_url:null,youtube_url:null,fileName:[xt,vt],fileType:[gt,_t],fileCode:[Q,J]},{id:"2",component_name:"Material Time Picker",path:"/material-time-picker",description:null,youtube_short_url:null,youtube_url:null,fileName:[xt,vt],fileType:[gt,_t],fileCode:[Z,tt]}]},{id:"7",type:!1,component_name:"Download File",path:"/download-file",description:null,youtube_short_url:null,youtube_url:null,fileName:[yt,xt,vt],fileType:[gt,gt,_t],fileCode:[et,at,it]},{id:"8",type:!1,component_name:"Share, Copy & Paste Text",path:"/share-copy-paste-text",description:null,youtube_short_url:null,youtube_url:null,fileName:[xt,vt],fileType:[gt,_t],fileCode:[rt,dt]},{id:"9",type:!1,component_name:"Search Bar With Menu",path:"/search-bar-with-menu",description:null,youtube_short_url:null,youtube_url:null,fileName:[xt,"search_menu.xml","item_layout.xml","ItemModel.kt","ItemAdapter.kt",vt],fileType:[gt,gt,gt,_t,_t,_t],fileCode:[lt,st.SBMenuXML,pt,ct,mt,ut]}];t.exports={sourceCodeList:ft}},,,,,,,,,,,,,,,,,,,,,,,,function(t,n,e){},function(t,n){t.exports={permissionMainfestsXml:'<?xml version="1.0" encoding="utf-8"?>\n<manifest xmlns:android="http://schemas.android.com/apk/res/android"\n    package="com.example">\n    <uses-permission android:name="android.permission.READ_CONTACTS" />\n    <application\n        android:allowBackup="true"\n        android:icon="@mipmap/ic_launcher"\n        android:label="@string/app_name"\n        android:roundIcon="@mipmap/ic_launcher_round"\n        android:supportsRtl="true"\n        android:theme="@style/Theme.AllExample">\n        <activity\n            android:name=".MainActivity"\n            android:exported="true">\n            <intent-filter>\n                <action android:name="android.intent.action.MAIN" />\n\n                <category android:name="android.intent.category.LAUNCHER" />\n            </intent-filter>\n        </activity>\n    </application>\n\n</manifest>',singlePermissionXMl:'<?xml version="1.0" encoding="utf-8"?>\n<androidx.constraintlayout.widget.ConstraintLayout \n    xmlns:android="http://schemas.android.com/apk/res/android"\n    xmlns:app="http://schemas.android.com/apk/res-auto"\n    xmlns:tools="http://schemas.android.com/tools"\n    android:layout_width="match_parent"\n    android:layout_height="match_parent"\n    tools:context=".MainActivity">\n\n    <Button\n        android:id="@+id/permissionBtn"\n        android:layout_width="wrap_content"\n        android:layout_height="wrap_content"\n        android:text="@string/permission"\n        app:layout_constraintBottom_toBottomOf="parent"\n        app:layout_constraintLeft_toLeftOf="parent"\n        app:layout_constraintRight_toRightOf="parent"\n        app:layout_constraintTop_toTopOf="parent" />\n\n</androidx.constraintlayout.widget.ConstraintLayout>',permissionStr:'<resources>\n    <string name="app_name">Run-time Permission</string>\n    <string name="permission">Permission</string>\n</resources>',permissionMethod:'package com.example\n\nimport android.app.Activity\nimport android.content.DialogInterface\nimport android.content.Intent\nimport android.content.pm.PackageManager\nimport android.net.Uri\nimport android.provider.Settings\nimport android.widget.Toast\nimport androidx.core.app.ActivityCompat\nimport androidx.core.content.ContextCompat\nimport com.google.android.material.dialog.MaterialAlertDialogBuilder\n\nobject Permission {\n    fun checkSinglePermission(\n        activity: Activity,\n        permission: String,\n        permissionCode: Int\n    ): Boolean {\n        if (ContextCompat.checkSelfPermission(\n                activity,\n                permission\n            ) == PackageManager.PERMISSION_DENIED\n        ) {\n            ActivityCompat.requestPermissions(\n                activity,\n                arrayOf(permission),\n                permissionCode\n            )\n        } else {\n            return true\n        }\n        return false\n    }\n\n    fun settingActivityOpen(activity: Activity) {\n        Toast.makeText(\n            activity,\n            "Go to settings and enable permissions",\n            Toast.LENGTH_LONG\n        )\n            .show()\n        val i = Intent()\n        i.action = Settings.ACTION_APPLICATION_DETAILS_SETTINGS\n        i.addCategory(Intent.CATEGORY_DEFAULT)\n        val packageName= activity.packageName\n        i.data = Uri.parse("package:$packageName")\n        i.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK)\n        i.addFlags(Intent.FLAG_ACTIVITY_NO_HISTORY)\n        i.addFlags(Intent.FLAG_ACTIVITY_EXCLUDE_FROM_RECENTS)\n        activity.startActivity(i)\n    }\n\n    fun showDialogOK(activity: Activity,okListener: DialogInterface.OnClickListener) {\n        MaterialAlertDialogBuilder(activity)\n            .setMessage("Permission is required for this app")\n            .setPositiveButton("OK", okListener)\n            .setNegativeButton("Cancel", okListener)\n            .create()\n            .show()\n    }\n}',singlePermissionKt:'package com.example\nimport android.Manifest\nimport android.content.DialogInterface\nimport android.content.pm.PackageManager\nimport androidx.appcompat.app.AppCompatActivity\nimport android.os.Bundle\nimport android.widget.Button\nimport android.widget.Toast\nimport androidx.core.app.ActivityCompat\nimport com.example.Permission.checkPermissionAny\nimport com.example.Permission.settingActivityOpen\nimport com.example.Permission.showDialogOK\n\nclass MainActivity : AppCompatActivity() {\n    private val permissionRequestId = 1\n    private val permissionRequestN = Manifest.permission.READ_CONTACTS\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_main)\n        findViewById<Button>(R.id.permissionBtn).setOnClickListener {\n            if (checkPermissionAny(\n                    this,\n                    permissionRequestN,\n                    permissionRequestId\n                )\n            ) {\n                doOperation()\n            }\n        }\n    }\n\n    override fun onRequestPermissionsResult(\n        requestCode: Int,\n        permissions: Array<out String>,\n        grantResults: IntArray\n    ) {\n        super.onRequestPermissionsResult(requestCode, permissions, grantResults)\n        if (requestCode == permissionRequestId) {\n            if (grantResults.isNotEmpty() && grantResults[0] == PackageManager.PERMISSION_GRANTED) {\n                doOperation()\n            } else {\n                if (!ActivityCompat.shouldShowRequestPermissionRationale(\n                        this,\n                        permissionRequestN\n                    )\n                ) {\n                    if (ActivityCompat.checkSelfPermission(\n                            this,\n                            permissionRequestN\n                        ) == PackageManager.PERMISSION_DENIED\n                    ) {\n                        settingActivityOpen(this)\n                    }\n                } else {\n                    showDialogOK(this) { _: DialogInterface?, which: Int ->\n                        when (which) {\n                            DialogInterface.BUTTON_POSITIVE -> {\n                                if (checkPermissionAny(\n                                        this,\n                                        permissionRequestN,\n                                        permissionRequestId\n                                    )\n                                ) {\n                                    doOperation()\n                                }\n                            }\n                            DialogInterface.BUTTON_NEGATIVE -> {\n                            }\n                        }\n                    }\n\n                }\n            }\n        }\n    }\n\n    private fun doOperation() {\n        Toast.makeText(this,"Successfully",Toast.LENGTH_LONG).show()\n    }\n}'}},function(t,n){t.exports={multiplAndroidManinfestXml:'<?xml version="1.0" encoding="utf-8"?>\n<manifest xmlns:android="http://schemas.android.com/apk/res/android"\n    package="com.example">\n    <uses-permission android:name="android.permission.CAMERA" />\n    <uses-permission android:name="android.permission.READ_CONTACTS" />\n    <application\n        android:allowBackup="true"\n        android:icon="@mipmap/ic_launcher"\n        android:label="@string/app_name"\n        android:roundIcon="@mipmap/ic_launcher_round"\n        android:supportsRtl="true"\n        android:theme="@style/Theme.AllExample">\n        <activity\n            android:name=".MainActivity"\n            android:exported="true">\n            <intent-filter>\n                <action android:name="android.intent.action.MAIN" />\n\n                <category android:name="android.intent.category.LAUNCHER" />\n            </intent-filter>\n        </activity>\n    </application>\n\n</manifest>',multipleActivtyXMl:'<?xml version="1.0" encoding="utf-8"?>\n<androidx.constraintlayout.widget.ConstraintLayout \n    xmlns:android="http://schemas.android.com/apk/res/android"\n    xmlns:app="http://schemas.android.com/apk/res-auto"\n    xmlns:tools="http://schemas.android.com/tools"\n    android:layout_width="match_parent"\n    android:layout_height="match_parent"\n    tools:context=".MainActivity">\n\n    <Button\n        android:id="@+id/permissionBtn"\n        android:layout_width="wrap_content"\n        android:layout_height="wrap_content"\n        android:text="@string/permission"\n        app:layout_constraintBottom_toBottomOf="parent"\n        app:layout_constraintLeft_toLeftOf="parent"\n        app:layout_constraintRight_toRightOf="parent"\n        app:layout_constraintTop_toTopOf="parent" />\n\n</androidx.constraintlayout.widget.ConstraintLayout>',multipleString:'<resources>\n    <string name="app_name">Multiple Run-time Permission</string>\n    <string name="permission">Permission</string>\n</resources>',multiplePermissionMethod:'package com.example\n\nimport android.app.Activity\nimport android.content.DialogInterface\nimport android.content.Intent\nimport android.net.Uri\nimport android.provider.Settings\nimport android.widget.Toast\nimport com.google.android.material.dialog.MaterialAlertDialogBuilder\n\nobject Permission {\n\n    fun settingActivityOpen(activity: Activity) {\n        Toast.makeText(\n            activity,\n            "Go to settings and enable permissions",\n            Toast.LENGTH_LONG\n        )\n            .show()\n        val i = Intent()\n        i.action = Settings.ACTION_APPLICATION_DETAILS_SETTINGS\n        i.addCategory(Intent.CATEGORY_DEFAULT)\n        val packageName = activity.packageName\n        i.data = Uri.parse("package:$packageName")\n        i.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK)\n        i.addFlags(Intent.FLAG_ACTIVITY_NO_HISTORY)\n        i.addFlags(Intent.FLAG_ACTIVITY_EXCLUDE_FROM_RECENTS)\n        activity.startActivity(i)\n    }\n\n    fun showDialogOK(activity: Activity, okListener: DialogInterface.OnClickListener) {\n        MaterialAlertDialogBuilder(activity)\n            .setMessage("All Permissions are required for this app")\n            .setPositiveButton("OK", okListener)\n            .setNegativeButton("Cancel", okListener)\n            .create()\n            .show()\n    }\n}',multiplePermissionActivity:'package com.example\n\nimport android.Manifest\nimport android.content.DialogInterface\nimport android.content.pm.PackageManager\nimport androidx.appcompat.app.AppCompatActivity\nimport android.os.Bundle\nimport android.widget.Button\nimport android.widget.Toast\nimport androidx.core.app.ActivityCompat\nimport androidx.core.content.ContextCompat\nimport com.example.Permission.settingActivityOpen\nimport com.example.Permission.showDialogOK\nimport java.util.ArrayList\n\nclass MainActivity : AppCompatActivity() {\n    private val multiplePermissionId = 1\n    private val permissionsReqList: ArrayList<String> = arrayListOf(\n        Manifest.permission.CAMERA,\n        Manifest.permission.READ_CONTACTS\n    )\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_main)\n        findViewById<Button>(R.id.permissionBtn).setOnClickListener {\n            if (checkMultipleRequestPermissions()) {\n                doOperation()\n            }\n        }\n    }\n    private fun checkMultipleRequestPermissions(): Boolean {\n        val listPermissionsNeeded: MutableList<String> = ArrayList()\n\n        for (p in permissionsReqList) {\n            val result = ContextCompat.checkSelfPermission(this, p)\n            if (result != PackageManager.PERMISSION_GRANTED) {\n                listPermissionsNeeded.add(p)\n            }\n        }\n\n        if (listPermissionsNeeded.isNotEmpty()) {\n            ActivityCompat.requestPermissions(\n                this,\n                listPermissionsNeeded.toTypedArray(),\n                multiplePermissionId\n            )\n            return false\n        }\n        return true\n    }\n    override fun onRequestPermissionsResult(\n        requestCode: Int,\n        permissions: Array<out String>,\n        grantResults: IntArray\n    ) {\n        super.onRequestPermissionsResult(requestCode, permissions, grantResults)\n        if (requestCode == multiplePermissionId) {\n            if (grantResults.isNotEmpty()) {\n                var isGrant = true\n                for (element in grantResults) {\n                    if (element == PackageManager.PERMISSION_DENIED) {\n                        isGrant = false\n                    }\n                }\n                if (isGrant) {\n                    doOperation()\n                } else {\n                    var someDenied = false\n                    for (permission in permissions) {\n                        if (!ActivityCompat.shouldShowRequestPermissionRationale(\n                                this,\n                                permission\n                            )\n                        ) {\n                            if (ActivityCompat.checkSelfPermission(\n                                    this,\n                                    permission\n                                ) == PackageManager.PERMISSION_DENIED\n                            ) {\n                                someDenied = true\n                            }\n                        }\n                    }\n                    if (someDenied) {\n                        settingActivityOpen(this)\n                    } else {\n                        showDialogOK(this) { _: DialogInterface?, which: Int ->\n                            when (which) {\n                                DialogInterface.BUTTON_POSITIVE -> checkMultipleRequestPermissions()\n                                DialogInterface.BUTTON_NEGATIVE -> {\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    private fun doOperation() {\n        Toast.makeText(this,"Successfully",Toast.LENGTH_LONG).show()\n    }\n}'}},function(t,n){t.exports={dialogActivtyXMl:'<?xml version="1.0" encoding="utf-8"?>\n<androidx.constraintlayout.widget.ConstraintLayout \n    xmlns:android="http://schemas.android.com/apk/res/android"\n    xmlns:app="http://schemas.android.com/apk/res-auto"\n    xmlns:tools="http://schemas.android.com/tools"\n    android:layout_width="match_parent"\n    android:layout_height="match_parent"\n    tools:context=".MainActivity">\n\n    <Button\n        android:id="@+id/Button"\n        android:layout_width="wrap_content"\n        android:layout_height="wrap_content"\n        android:text="Dialog"\n        app:layout_constraintBottom_toBottomOf="parent"\n        app:layout_constraintLeft_toLeftOf="parent"\n        app:layout_constraintRight_toRightOf="parent"\n        app:layout_constraintTop_toTopOf="parent" />\n\n</androidx.constraintlayout.widget.ConstraintLayout>',layout_progress:'<?xml version="1.0" encoding="utf-8"?>\n<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"\n    android:orientation="horizontal"\n    android:padding="13dp"\n    android:layout_centerHorizontal="true"\n    android:layout_width="wrap_content"\n    android:layout_height="wrap_content">\n\n    <ProgressBar\n        android:id="@+id/loader"\n        android:layout_marginEnd="5dp"\n        android:layout_width="45dp"\n        android:layout_height="45dp" />\n    <TextView\n        android:layout_width="wrap_content"\n        android:text="Loading..."\n        android:textAppearance="?android:textAppearanceSmall"\n        android:layout_gravity="center_vertical"\n        android:id="@+id/loading_msg"\n        android:layout_height="wrap_content" />\n\n</LinearLayout>',progressActivityKt:"package com.example\n\nimport androidx.appcompat.app.AppCompatActivity\nimport android.os.Bundle\nimport android.widget.Button\nimport androidx.appcompat.app.AlertDialog\n\nclass MainActivity : AppCompatActivity() {\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_main)\n        val builder = AlertDialog.Builder(this)\n        builder.setView(R.layout.layout_progress)\n        builder.setCancelable(true)\n        val alertDialog: AlertDialog = builder.create()\n        findViewById<Button>(R.id.Button).setOnClickListener {\n            alertDialog.show()\n        }\n    }\n}",layout_loading:'<?xml version="1.0" encoding="utf-8"?>\n<LinearLayout\n    xmlns:android="http://schemas.android.com/apk/res/android"\n    android:layout_width="wrap_content"\n    android:orientation="horizontal"\n    android:padding="4dp"\n    android:layout_height="wrap_content">\n\n    <ProgressBar\n        android:id="@+id/progressBar"\n        style="?android:attr/progressBarStyle"\n        android:layout_width="wrap_content"\n        android:layout_height="wrap_content"\n        android:layout_weight="1" />\n\n    <TextView\n        android:id="@+id/textView3"\n        android:layout_width="wrap_content"\n        android:layout_height="wrap_content"\n        android:layout_weight="1"\n        android:text="Loading"\n        android:textStyle="bold"\n        android:padding="8dp"\n        android:layout_gravity="center"/>\n</LinearLayout>',loadingActivityKt:"package com.example\n\nimport android.app.Dialog\nimport androidx.appcompat.app.AppCompatActivity\nimport android.os.Bundle\nimport android.widget.Button\nimport android.widget.LinearLayout\n\nclass MainActivity : AppCompatActivity() {\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_main)\n        val loadingDialog = Dialog(this)\n        loadingDialog.setContentView(R.layout.layout_loading)\n        loadingDialog.window!!.setLayout(\n            LinearLayout.LayoutParams.WRAP_CONTENT,\n            LinearLayout.LayoutParams.WRAP_CONTENT\n        )\n        loadingDialog.setCancelable(true)\n        findViewById<Button>(R.id.Button).setOnClickListener {\n            loadingDialog.show()\n        }\n    }\n}",alertActivityKt:'package com.example\n\nimport androidx.appcompat.app.AppCompatActivity\nimport android.os.Bundle\nimport android.widget.Button\nimport android.widget.Toast\nimport androidx.appcompat.app.AlertDialog\n\nclass MainActivity : AppCompatActivity() {\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_main)\n        val builder = AlertDialog.Builder(this)\n        builder.setTitle("Title")\n        builder.setMessage("Message")\n        builder.setIcon(android.R.drawable.ic_dialog_alert)\n        builder.setPositiveButton("Yes") { _, _ ->\n            Toast.makeText(this, "clicked yes", Toast.LENGTH_LONG).show()\n        }\n        builder.setNeutralButton("Cancel") { _, _ ->\n            Toast.makeText(this, "clicked cancel operation cancel", Toast.LENGTH_LONG).show()\n        }\n        builder.setNegativeButton("No") { _, _ ->\n            Toast.makeText(this, "clicked No", Toast.LENGTH_LONG).show()\n        }\n        val alertDialog: AlertDialog = builder.create()\n        alertDialog.setCancelable(false)\n\n\n        findViewById<Button>(R.id.Button).setOnClickListener {\n            alertDialog.show()\n        }\n    }\n}',materialAlertActivityKt:'package com.example\n\nimport androidx.appcompat.app.AppCompatActivity\nimport android.os.Bundle\nimport android.widget.Button\nimport android.widget.Toast\nimport com.google.android.material.dialog.MaterialAlertDialogBuilder\n\nclass MainActivity : AppCompatActivity() {\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_main)\n        val materialDialog = MaterialAlertDialogBuilder(this)\n            .setTitle("Title")\n            .setMessage("Message")\n            .setIcon(android.R.drawable.ic_dialog_alert)\n            .setPositiveButton("Ok") { _, _ ->\n                Toast.makeText(this, "clicked ok", Toast.LENGTH_LONG).show()\n            }\n            .setNegativeButton("Cancel") { _, _ ->\n                Toast.makeText(this, "clicked Cancel", Toast.LENGTH_LONG).show()\n            }\n\n        findViewById<Button>(R.id.Button).setOnClickListener {\n            materialDialog.show()\n        }\n    }\n}',materialThemeDialogActivityKt:'package com.example\n\nimport androidx.appcompat.app.AppCompatActivity\nimport android.os.Bundle\nimport android.widget.Button\nimport android.widget.Toast\nimport com.google.android.material.dialog.MaterialAlertDialogBuilder\n\nclass MainActivity : AppCompatActivity() {\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_main)\n        var checkedItem = 2\n        val items = arrayOf("Light", "Dark", "Auto (System Default)")\n        val materialThemeDialog = MaterialAlertDialogBuilder(this)\n            .setTitle("Theme")\n            .setPositiveButton("Ok") { _, _ ->\n                when (checkedItem) {\n                    0 -> {\n                        Toast.makeText(this, "Light Mode", Toast.LENGTH_LONG).show()\n                    }\n                    1 -> {\n                        Toast.makeText(this, "Dark Mode", Toast.LENGTH_LONG).show()\n                    }\n                    else -> {\n                        Toast.makeText(this, "Auto", Toast.LENGTH_LONG).show()\n                    }\n                }\n            }\n            .setSingleChoiceItems(items, checkedItem) { _, which ->\n                checkedItem = which\n            }\n            .setCancelable(false)\n\n        findViewById<Button>(R.id.Button).setOnClickListener {\n            materialThemeDialog.show()\n        }\n    }\n}',customeDialogActivityKt:'package com.example\n\nimport android.app.Dialog\nimport android.content.Context\nimport androidx.appcompat.app.AppCompatActivity\nimport android.os.Bundle\nimport android.view.View\nimport android.view.inputmethod.InputMethodManager\nimport android.widget.*\nimport java.lang.Exception\n\nclass MainActivity : AppCompatActivity() {\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_main)\n        val fileDialog = Dialog(this)\n        fileDialog.setContentView(R.layout.layout_custom_dialog)\n        fileDialog.window!!.setLayout(\n            LinearLayout.LayoutParams.MATCH_PARENT,\n            LinearLayout.LayoutParams.WRAP_CONTENT\n        )\n        val cancelBtn: Button = fileDialog.findViewById(R.id.cancel_btn)\n        val saveBtn: Button = fileDialog.findViewById(R.id.save_btn)\n        val edFileName: EditText = fileDialog.findViewById(R.id.edFileName)\n        val fileTypeRG: RadioGroup = fileDialog.findViewById(R.id.fileTypeGroup)\n        var fileTypeStr = "male"\n        fileTypeRG.setOnCheckedChangeListener { _: RadioGroup?, checkedId: Int ->\n            if (checkedId == R.id.radioMale) {\n                fileTypeStr = "male"\n            } else if (checkedId == R.id.radioFemale) {\n                fileTypeStr = "female"\n            }\n        }\n        cancelBtn.setOnClickListener { v: View ->\n            hideKeyboard(this,v)\n            fileDialog.dismiss()\n        }\n        saveBtn.setOnClickListener { v: View ->\n            if (edFileName.text.toString().trim().isEmpty()) {\n                edFileName.error = "Required"\n            } else {\n                Toast.makeText(this, edFileName.text.toString() + fileTypeStr, Toast.LENGTH_LONG).show()\n            }\n            hideKeyboard(this,v)\n            fileDialog.dismiss()\n        }\n\n        findViewById<Button>(R.id.Button).setOnClickListener {\n            fileDialog.show()\n        }\n    }\n    private fun hideKeyboard(context: Context, view: View) {\n        try {\n            val imm: InputMethodManager =\n                context.getSystemService(INPUT_METHOD_SERVICE) as InputMethodManager\n            imm.hideSoftInputFromWindow(view.windowToken, 0)\n        } catch (ignored: Exception) {\n        }\n    }\n}'}},function(t,n){t.exports={installedActivityXML:'<?xml version="1.0" encoding="utf-8"?>\n<androidx.constraintlayout.widget.ConstraintLayout \n    xmlns:android="http://schemas.android.com/apk/res/android"\n    xmlns:app="http://schemas.android.com/apk/res-auto"\n    xmlns:tools="http://schemas.android.com/tools"\n    android:layout_width="match_parent"\n    android:layout_height="match_parent"\n    tools:context=".MainActivity">\n\n    <TextView\n        android:id="@+id/totalInstalledApp"\n        android:layout_width="match_parent"\n        android:layout_height="wrap_content"\n        android:text="@string/total_Installed_Apps"\n        android:textAlignment="center"\n        android:textStyle="bold"\n        app:layout_constraintEnd_toEndOf="parent"\n        app:layout_constraintStart_toStartOf="parent"\n        app:layout_constraintTop_toTopOf="parent" />\n\n    <androidx.recyclerview.widget.RecyclerView\n        android:id="@+id/recycler_view"\n        android:layout_width="match_parent"\n        android:layout_height="0dp"\n        android:orientation="vertical"\n        app:layoutManager="androidx.recyclerview.widget.LinearLayoutManager"\n        app:layout_constraintBottom_toBottomOf="parent"\n        app:layout_constraintLeft_toLeftOf="parent"\n        app:layout_constraintRight_toRightOf="parent"\n        app:layout_constraintTop_toBottomOf="@+id/totalInstalledApp"\n        tools:listitem="@layout/layout_installed_app" />\n</androidx.constraintlayout.widget.ConstraintLayout>',layout_installed_apps:'<?xml version="1.0" encoding="utf-8"?>\n<androidx.constraintlayout.widget.ConstraintLayout \n    xmlns:android="http://schemas.android.com/apk/res/android"\n    xmlns:app="http://schemas.android.com/apk/res-auto"\n    android:layout_width="match_parent"\n    android:layout_height="wrap_content"\n    android:layout_margin="4dp"\n    android:background="?attr/selectableItemBackground"\n    android:elevation="6dp">\n\n    <androidx.cardview.widget.CardView\n        android:id="@+id/cardview"\n        android:layout_width="0dp"\n        android:layout_height="wrap_content"\n        android:layout_alignParentEnd="true"\n        app:cardCornerRadius="5dp"\n        app:cardUseCompatPadding="true"\n        app:layout_constraintBottom_toBottomOf="parent"\n        app:layout_constraintEnd_toEndOf="parent"\n        app:layout_constraintStart_toStartOf="parent"\n        app:layout_constraintTop_toTopOf="parent">\n\n        <androidx.constraintlayout.widget.ConstraintLayout\n            android:layout_width="match_parent"\n            android:layout_height="wrap_content">\n\n            <ImageView\n                android:id="@+id/app_icon"\n                android:layout_width="48dp"\n                android:layout_height="48dp"\n                android:layout_marginStart="8dp"\n                android:layout_marginTop="2dp"\n                android:layout_marginBottom="2dp"\n                android:contentDescription="@string/todo"\n                app:layout_constraintBottom_toBottomOf="parent"\n                app:layout_constraintStart_toStartOf="parent"\n                app:layout_constraintTop_toTopOf="parent" />\n\n            <TextView\n                android:id="@+id/list_app_name"\n                android:layout_width="0dp"\n                android:layout_height="wrap_content"\n                android:layout_marginStart="8dp"\n                android:text="@string/app_name"\n                android:textSize="16sp"\n                android:textStyle="bold"\n                app:layout_constraintEnd_toEndOf="parent"\n                app:layout_constraintStart_toEndOf="@+id/app_icon"\n                app:layout_constraintTop_toTopOf="parent" />\n\n            <TextView\n                android:id="@+id/app_package"\n                android:layout_width="0dp"\n                android:layout_height="wrap_content"\n                android:layout_marginStart="8dp"\n                android:text="@string/app_package_name"\n                android:textStyle="bold"\n                app:layout_constraintBottom_toBottomOf="parent"\n                app:layout_constraintEnd_toEndOf="parent"\n                app:layout_constraintStart_toEndOf="@+id/app_icon"\n                app:layout_constraintTop_toBottomOf="@+id/list_app_name" />\n        </androidx.constraintlayout.widget.ConstraintLayout>\n    </androidx.cardview.widget.CardView>\n</androidx.constraintlayout.widget.ConstraintLayout>',installedLayoutLoadingXml:'<?xml version="1.0" encoding="utf-8"?>\n<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"\n    android:layout_width="wrap_content"\n    android:layout_height="wrap_content"\n    android:orientation="horizontal"\n    android:padding="4dp">\n\n    <ProgressBar\n        android:id="@+id/progressBar"\n        style="?android:attr/progressBarStyle"\n        android:layout_width="wrap_content"\n        android:layout_height="wrap_content"\n        android:layout_weight="1" />\n\n    <TextView\n        android:id="@+id/textView3"\n        android:layout_width="wrap_content"\n        android:layout_height="wrap_content"\n        android:layout_gravity="center"\n        android:layout_weight="1"\n        android:padding="8dp"\n        android:text="@string/loading"\n        android:textStyle="bold" />\n</LinearLayout>',installedString:'<resources>\n    <string name="app_name">Display All Installed App</string>\n    <string name="all_installed_app">All Installed App</string>\n    <string name="app_package_name">App Package Name</string>\n    <string name="total_Installed_Apps">Total Installed Apps:</string>\n    <string name="search">Search</string>\n    <string name="todo">todo</string>\n    <string name="loading">Loading\u2026</string>\n</resources>',search_menuXml:'<?xml version="1.0" encoding="utf-8"?>\n<menu xmlns:android="http://schemas.android.com/apk/res/android"\n    xmlns:app="http://schemas.android.com/apk/res-auto">\n    <item\n        android:id="@+id/app_bar_search"\n        android:icon="@drawable/ic_search_black_24dp"\n        android:title="@string/search"\n        app:actionViewClass="androidx.appcompat.widget.SearchView"\n        app:showAsAction="ifRoom|withText" />\n</menu>',appModel:"package com.example.models\n\nimport android.graphics.drawable.Drawable\n\nclass AppModel(private var name: String, private var icon: Drawable, private var packages: String) {\n    fun getName(): String {\n        return name\n    }\n\n    fun getIcon(): Drawable {\n        return icon\n    }\n\n    fun getPackages(): String {\n        return packages\n    }\n}",appAdapter:'package com.example.adapters\n\nimport android.app.AlertDialog\nimport android.content.Context\nimport android.view.LayoutInflater\nimport android.view.View\nimport android.view.ViewGroup\nimport android.widget.ImageView\nimport android.widget.TextView\nimport androidx.recyclerview.widget.RecyclerView\nimport com.example.R\nimport com.example.models.AppModel\nimport java.util.ArrayList\n\nimport android.content.Intent\nimport android.net.Uri\nimport android.provider.Settings\nimport android.widget.Toast\n\n\nclass AppAdapter(private val context: Context, private var appModelList: ArrayList<AppModel>) :\n    RecyclerView.Adapter<AppAdapter.ViewHolder>() {\n\n\n    class ViewHolder(ItemView: View) : RecyclerView.ViewHolder(ItemView) {\n        val appNameTxt: TextView = itemView.findViewById(R.id.list_app_name)\n        val appPackageNameTxt: TextView = itemView.findViewById(R.id.app_package)\n        val appIcon: ImageView = itemView.findViewById(R.id.app_icon)\n    }\n\n    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): ViewHolder {\n        val view: View =\n            LayoutInflater.from(parent.context)\n                .inflate(R.layout.layout_installed_app, parent, false)\n        return ViewHolder(view)\n    }\n\n    override fun onBindViewHolder(holder: ViewHolder, position: Int) {\n        holder.appNameTxt.text = appModelList[position].getName()\n        holder.appIcon.setImageDrawable(appModelList[position].getIcon())\n        holder.appPackageNameTxt.text = appModelList[position].getPackages()\n\n        holder.itemView.setOnClickListener {\n            val dialogListTitle = arrayOf("Open App", "App Info")\n            val builder: AlertDialog.Builder = AlertDialog.Builder(context)\n            builder.setTitle("Choose Action")\n                .setItems(\n                    dialogListTitle\n                ) { _, which ->\n                    when (which) {\n                        0 -> {\n                            val intent =\n                                context.packageManager.getLaunchIntentForPackage(appModelList[position].getPackages())\n                            if (intent != null) {\n                                context.startActivity(intent)\n                            } else {\n                                Toast.makeText(\n                                    context,\n                                    "System app is not open for any reason.",\n                                    Toast.LENGTH_LONG\n                                ).show()\n                            }\n                        }\n                        1 -> {\n                            val intent = Intent()\n                            intent.action = Settings.ACTION_APPLICATION_DETAILS_SETTINGS\n                            intent.data =\n                                Uri.parse("package:"+appModelList[position].getPackages())\n                            context.startActivity(intent)\n                        }\n                    }\n                }\n            builder.show()\n        }\n\n    }\n\n    override fun getItemCount(): Int {\n        return appModelList.size\n    }\n}',installedActivityKt:'package com.example\n\nimport android.annotation.SuppressLint\nimport android.app.Dialog\nimport android.content.pm.ApplicationInfo\nimport android.content.pm.PackageInfo\nimport androidx.appcompat.app.AppCompatActivity\nimport android.os.Bundle\nimport android.os.Handler\nimport android.os.Looper\nimport android.view.Menu\nimport android.widget.LinearLayout\nimport android.widget.TextView\nimport androidx.appcompat.widget.SearchView\nimport androidx.recyclerview.widget.RecyclerView\nimport com.example.adapters.AppAdapter\nimport com.example.models.AppModel\nimport java.util.*\nimport kotlin.collections.ArrayList\n\n\nclass MainActivity : AppCompatActivity() {\n    private lateinit var recyclerView: RecyclerView\n    private lateinit var installedAppsList: ArrayList<AppModel>\n    private lateinit var installedAppAdapter: AppAdapter\n\n    @SuppressLint("SetTextI18n")\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_main)\n        recyclerView = findViewById(R.id.recycler_view)\n        val loadingDialog = Dialog(this)\n        loadingDialog.setContentView(R.layout.layout_loading)\n        loadingDialog.window!!.setLayout(\n            LinearLayout.LayoutParams.WRAP_CONTENT,\n            LinearLayout.LayoutParams.WRAP_CONTENT\n        )\n        loadingDialog.setCancelable(false)\n        installedAppsList = ArrayList()\n        loadingDialog.show()\n        Handler(Looper.getMainLooper()).postDelayed({\n            getInstalledApps()\n            loadingDialog.dismiss()\n            findViewById<TextView>(R.id.totalInstalledApp).text =\n                getString(R.string.total_Installed_Apps) + installedAppsList.size.toString()\n            installedAppAdapter = AppAdapter(this, installedAppsList)\n            recyclerView.adapter = installedAppAdapter\n        }, 500)\n\n    }\n\n    @SuppressLint("QueryPermissionsNeeded")\n    private fun getInstalledApps(): ArrayList<AppModel> {\n        installedAppsList.clear()\n        val packs = packageManager.getInstalledPackages(0)\n        for (i in packs.indices) {\n            val p = packs[i]\n            if (!isSystemPackage(p)) {\n                val appName = p.applicationInfo.loadLabel(packageManager).toString()\n                val icon = p.applicationInfo.loadIcon(packageManager)\n                val packages = p.applicationInfo.packageName\n                installedAppsList.add(AppModel(appName, icon, packages))\n            }\n        }\n        installedAppsList.sortBy { it.getName().capitalized() }\n        return installedAppsList\n    }\n\n    private fun String.capitalized(): String {\n        return this.replaceFirstChar {\n            if (it.isLowerCase())\n                it.titlecase(Locale.getDefault())\n            else it.toString()\n        }\n    }\n\n    private fun isSystemPackage(pkgInfo: PackageInfo): Boolean {\n        return pkgInfo.applicationInfo.flags and ApplicationInfo.FLAG_SYSTEM != 0\n    }\n\n    override fun onCreateOptionsMenu(menu: Menu): Boolean {\n        menuInflater.inflate(R.menu.search_menu, menu)\n        val search = menu.findItem(R.id.app_bar_search)\n\n        val searchView = search.actionView as SearchView\n        searchView.maxWidth = android.R.attr.width\n        searchView.queryHint = "Search app name or package"\n        searchView.setOnQueryTextListener(object : SearchView.OnQueryTextListener {\n            override fun onQueryTextSubmit(query: String?): Boolean {\n                return false\n            }\n\n            @SuppressLint("NotifyDataSetChanged")\n            override fun onQueryTextChange(newText: String?): Boolean {\n                val appModelArrayList: ArrayList<AppModel> = ArrayList()\n\n                for (i in installedAppsList) {\n                    if (i.getName().lowercase(Locale.getDefault()).contains(\n                            newText!!.lowercase(\n                                Locale.getDefault()\n                            )\n                        )\n                        ||\n                        i.getPackages().lowercase(Locale.getDefault()).contains(\n                            newText.lowercase(\n                                Locale.getDefault()\n                            )\n                        )\n                    ) {\n                        appModelArrayList.add(i)\n                    }\n                }\n                installedAppAdapter =\n                    AppAdapter(this@MainActivity, appModelArrayList)\n\n                recyclerView.adapter = installedAppAdapter\n                installedAppAdapter.notifyDataSetChanged()\n                return true\n            }\n        })\n\n        return super.onCreateOptionsMenu(menu)\n    }\n}'}},function(t,n){t.exports={ThemeColorXML:'<?xml version="1.0" encoding="utf-8"?>\n<resources>\n    <color name="purple_200">#FFBB86FC</color>\n    <color name="purple_500">#FF6200EE</color>\n    <color name="purple_700">#FF3700B3</color>\n    <color name="teal_200">#FF03DAC5</color>\n    <color name="teal_700">#FF018786</color>\n    <color name="black">#FF000000</color>\n    <color name="white">#FFFFFFFF</color>\n\n    <color name="textColorLight">#0026FF</color>\n    <color name="textColorDark">#FFD600</color>\n\n</resources>',ThemeLightXML:'<resources xmlns:tools="http://schemas.android.com/tools">\n\x3c!-- Base application theme. --\x3e\n<style name="Theme.AllExample" parent="Theme.MaterialComponents.DayNight.DarkActionBar">\n    \x3c!-- Primary brand color. --\x3e\n    <item name="colorPrimary">@color/purple_500</item>\n    <item name="colorPrimaryVariant">@color/purple_700</item>\n    <item name="colorOnPrimary">@color/white</item>\n    \x3c!-- Secondary brand color. --\x3e\n    <item name="colorSecondary">@color/teal_200</item>\n    <item name="colorSecondaryVariant">@color/teal_700</item>\n    <item name="colorOnSecondary">@color/black</item>\n    \x3c!-- Status bar color. --\x3e\n    <item name="android:statusBarColor" tools:targetApi="l">?attr/colorPrimaryVariant</item>\n    \x3c!-- Customize your theme here. --\x3e\n</style>\n\n<style name="textView" parent="Theme.AllExample">\n    <item name="android:textColor">@color/textColorLight</item>\n</style>\n</resources>',ThemeDarkXML:'<resources xmlns:tools="http://schemas.android.com/tools">\n\x3c!-- Base application theme. --\x3e\n<style name="Theme.AllExample" parent="Theme.MaterialComponents.DayNight.DarkActionBar">\n    \x3c!-- Primary brand color. --\x3e\n    <item name="colorPrimary">@color/purple_200</item>\n    <item name="colorPrimaryVariant">@color/purple_700</item>\n    <item name="colorOnPrimary">@color/black</item>\n    \x3c!-- Secondary brand color. --\x3e\n    <item name="colorSecondary">@color/teal_200</item>\n    <item name="colorSecondaryVariant">@color/teal_200</item>\n    <item name="colorOnSecondary">@color/black</item>\n    \x3c!-- Status bar color. --\x3e\n    <item name="android:statusBarColor" tools:targetApi="l">?attr/colorPrimaryVariant</item>\n    \x3c!-- Customize your theme here. --\x3e\n</style>\n\n<style name="textView" parent="Theme.AllExample">\n    <item name="android:textColor">@color/textColorDark</item>\n</style>\n</resources>',ThemeActiviyMainXML:'<?xml version="1.0" encoding="utf-8"?>\n<androidx.constraintlayout.widget.ConstraintLayout \n    xmlns:android="http://schemas.android.com/apk/res/android"\n    xmlns:app="http://schemas.android.com/apk/res-auto"\n    xmlns:tools="http://schemas.android.com/tools"\n    android:layout_width="match_parent"\n    android:layout_height="match_parent"\n    tools:context=".MainActivity">\n\n    <LinearLayout\n        android:id="@+id/themeChangeLayout"\n        android:layout_width="match_parent"\n        android:layout_height="wrap_content"\n        android:background="?attr/selectableItemBackground"\n        android:orientation="vertical"\n        android:padding="8dp"\n        app:layout_constraintBottom_toBottomOf="parent"\n        app:layout_constraintEnd_toEndOf="parent"\n        app:layout_constraintStart_toStartOf="parent"\n        app:layout_constraintTop_toTopOf="parent">\n\n        <TextView\n            android:layout_width="wrap_content"\n            android:layout_height="wrap_content"\n            android:layout_marginStart="4dp"\n            android:text="Theme"\n            android:theme="@style/textView" />\n\n        <TextView\n            android:id="@+id/themeStateTxt"\n            android:layout_width="wrap_content"\n            android:layout_height="wrap_content"\n            android:layout_marginStart="4dp"\n            android:theme="@style/textView"\n            android:textSize="12sp" />\n    </LinearLayout>\n</androidx.constraintlayout.widget.ConstraintLayout>',ThemeMainActivityKt:'package com.example\n\nimport android.content.SharedPreferences\nimport android.os.Bundle\nimport android.widget.LinearLayout\nimport android.widget.TextView\nimport androidx.appcompat.app.AppCompatActivity\nimport androidx.appcompat.app.AppCompatDelegate\nimport com.google.android.material.dialog.MaterialAlertDialogBuilder\n\n\nclass MainActivity : AppCompatActivity() {\n    private lateinit var sharedPreferences: SharedPreferences\n    private val items = arrayOf("Light", "Dark", "Auto (System Default)")\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_main)\n\n        sharedPreferences = getSharedPreferences(getString(R.string.app_name), MODE_PRIVATE)\n        themeChangeText(findViewById(R.id.themeStateTxt))\n        findViewById<LinearLayout>(R.id.themeChangeLayout).setOnClickListener { themeDialog() }\n    }\n\n    private fun themeChangeText(themeStateTxt: TextView) {\n        when (sharedPreferences.getInt("night_mode", 2)) {\n            0 -> themeStateTxt.text = items[0]\n            1 -> themeStateTxt.text = items[1]\n            else -> themeStateTxt.text = items[2]\n        }\n    }\n\n    private fun themeDialog() {\n        var checkedItem = sharedPreferences.getInt("night_mode", 2)\n\n        MaterialAlertDialogBuilder(this)\n            .setTitle("Theme")\n            .setPositiveButton("Ok") { _, _ ->\n                when (checkedItem) {\n                    0 -> {\n                        sharedPreferences.edit().putInt("night_mode", 0).apply()\n                        AppCompatDelegate.setDefaultNightMode(AppCompatDelegate.MODE_NIGHT_NO)\n                    }\n                    1 -> {\n                        sharedPreferences.edit().putInt("night_mode", 1).apply()\n                        AppCompatDelegate.setDefaultNightMode(AppCompatDelegate.MODE_NIGHT_YES)\n                    }\n                    else -> {\n                        sharedPreferences.edit().putInt("night_mode", 2).apply()\n                        AppCompatDelegate.setDefaultNightMode(AppCompatDelegate.MODE_NIGHT_FOLLOW_SYSTEM)\n                    }\n                }\n                themeChangeText(findViewById(R.id.themeStateTxt))\n            }\n            .setSingleChoiceItems(items, checkedItem) { _, which ->\n                checkedItem = which\n            }\n            .setCancelable(false)\n            .show()\n    }\n}',ThemeSplashXML:'<?xml version="1.0" encoding="utf-8"?>\n<androidx.constraintlayout.widget.ConstraintLayout \n    xmlns:android="http://schemas.android.com/apk/res/android"\n    xmlns:app="http://schemas.android.com/apk/res-auto"\n    xmlns:tools="http://schemas.android.com/tools"\n    android:layout_width="match_parent"\n    android:layout_height="match_parent"\n    tools:context=".SplashActivity">\n\n    <TextView\n        android:id="@+id/textView"\n        android:textSize="32sp"\n        android:layout_width="wrap_content"\n        android:layout_height="wrap_content"\n        android:text="Welcome"\n        android:theme="@style/textView"\n        app:layout_constraintBottom_toBottomOf="parent"\n        app:layout_constraintEnd_toEndOf="parent"\n        app:layout_constraintStart_toStartOf="parent"\n        app:layout_constraintTop_toTopOf="parent" />\n\n</androidx.constraintlayout.widget.ConstraintLayout>',ThemeSplashActivityKt:'package com.example\n\nimport android.annotation.SuppressLint\nimport android.content.Intent\nimport androidx.appcompat.app.AppCompatActivity\nimport android.os.Bundle\nimport androidx.appcompat.app.AppCompatDelegate\nimport android.os.Handler\nimport android.os.Looper\n\n@SuppressLint("CustomSplashScreen")\nclass SplashActivity : AppCompatActivity() {\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        val sharedPreferences = getSharedPreferences(getString(R.string.app_name), MODE_PRIVATE)\n        when (sharedPreferences.getInt("night_mode", 2)) {\n            0 -> AppCompatDelegate.setDefaultNightMode(AppCompatDelegate.MODE_NIGHT_NO)\n            1 -> AppCompatDelegate.setDefaultNightMode(AppCompatDelegate.MODE_NIGHT_YES)\n            else -> AppCompatDelegate.setDefaultNightMode(AppCompatDelegate.MODE_NIGHT_FOLLOW_SYSTEM)\n        }\n        setContentView(R.layout.activity_splash)\n        Timer().schedule(1000) {\n            Handler(Looper.getMainLooper()).postDelayed({\n                startActivity(Intent(this@SplashActivity, MainActivity::class.java))\n                finish()\n            }, 1000)\n        }\n    }\n\n}',ThemeAndroidMainfest:'<?xml version="1.0" encoding="utf-8"?>\n<manifest xmlns:android="http://schemas.android.com/apk/res/android"\n    package="com.example">\n\n    <application\n        android:allowBackup="true"\n        android:icon="@mipmap/ic_launcher"\n        android:label="@string/app_name"\n        android:roundIcon="@mipmap/ic_launcher_round"\n        android:supportsRtl="true"\n        android:theme="@style/Theme.AllExample">\n        <activity\n            android:name=".SplashActivity"\n            android:configChanges="uiMode"\n            android:exported="true">\n            <intent-filter>\n                <action android:name="android.intent.action.MAIN" />\n\n                <category android:name="android.intent.category.LAUNCHER" />\n            </intent-filter>\n        </activity>\n        <activity\n            android:name=".MainActivity"\n            android:exported="false" />\n    </application>\n\n</manifest>'}},function(t,n){t.exports={SimpleDatePickerActivityXMl:'<?xml version="1.0" encoding="utf-8"?>\n<androidx.constraintlayout.widget.ConstraintLayout \n    xmlns:android="http://schemas.android.com/apk/res/android"\n    xmlns:app="http://schemas.android.com/apk/res-auto"\n    xmlns:tools="http://schemas.android.com/tools"\n    android:layout_width="match_parent"\n    android:layout_height="match_parent"\n    tools:context=".MainActivity">\n\n    <LinearLayout\n        android:layout_width="match_parent"\n        android:layout_height="wrap_content"\n        android:orientation="vertical"\n        app:layout_constraintBottom_toBottomOf="parent"\n        app:layout_constraintEnd_toEndOf="parent"\n        app:layout_constraintStart_toStartOf="parent"\n        app:layout_constraintTop_toTopOf="parent">\n\n        <TextView\n            android:id="@+id/dateTxt"\n            android:layout_width="match_parent"\n            android:layout_height="wrap_content"\n            android:textAlignment="center"\n            android:textSize="16sp" />\n\n        <Button\n            android:id="@+id/simpleDatePickerBtn"\n            android:layout_width="match_parent"\n            android:layout_height="wrap_content"\n            android:layout_margin="8dp"\n            android:text="simple date picker" />\n    </LinearLayout>\n</androidx.constraintlayout.widget.ConstraintLayout>',SimpleDatePickerActivityKT:'package com.example\n\nimport android.app.DatePickerDialog\nimport android.os.Bundle\nimport android.widget.Button\nimport android.widget.TextView\nimport androidx.appcompat.app.AppCompatActivity\nimport java.text.SimpleDateFormat\nimport java.util.*\n\n\nclass MainActivity : AppCompatActivity() {\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_main)\n\n        // todo: Simple date picker code\n        val cal = Calendar.getInstance()\n        findViewById<TextView>(R.id.dateTxt).text = "--/--/----"\n        val dateSetListener =\n            DatePickerDialog.OnDateSetListener { _, year, monthOfYear, dayOfMonth ->\n                cal.set(Calendar.YEAR, year)\n                cal.set(Calendar.MONTH, monthOfYear)\n                cal.set(Calendar.DAY_OF_MONTH, dayOfMonth)\n                val myFormat = "dd-MMM-yyyy" // mention the format you need\n                val sdf = SimpleDateFormat(myFormat, Locale.US)\n                findViewById<TextView>(R.id.dateTxt).text = sdf.format(cal.time)\n            }\n        findViewById<Button>(R.id.simpleDatePickerBtn).setOnClickListener {\n            DatePickerDialog(\n                this,\n                dateSetListener,\n                cal.get(Calendar.YEAR),\n                cal.get(Calendar.MONTH),\n                cal.get(Calendar.DAY_OF_MONTH)\n            ).show()\n        }\n        // todo: Simple date picker code\n    }\n\n}'}},function(t,n){t.exports={MaterialDatePickerActivityXMl:'<?xml version="1.0" encoding="utf-8"?>\n<androidx.constraintlayout.widget.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"\n    xmlns:app="http://schemas.android.com/apk/res-auto"\n    xmlns:tools="http://schemas.android.com/tools"\n    android:layout_width="match_parent"\n    android:layout_height="match_parent"\n    tools:context=".MainActivity">\n\n    <LinearLayout\n        android:layout_width="match_parent"\n        android:layout_height="wrap_content"\n        android:orientation="vertical"\n        app:layout_constraintBottom_toBottomOf="parent"\n        app:layout_constraintEnd_toEndOf="parent"\n        app:layout_constraintStart_toStartOf="parent"\n        app:layout_constraintTop_toTopOf="parent">\n\n        <TextView\n            android:id="@+id/dateTxt"\n            android:layout_width="match_parent"\n            android:layout_height="wrap_content"\n            android:textAlignment="center"\n            android:textSize="16sp" />\n\n        <Button\n            android:id="@+id/materialDatePickerBtn"\n            android:layout_width="match_parent"\n            android:layout_height="wrap_content"\n            android:layout_margin="8dp"\n            android:text="Material date picker" />\n    </LinearLayout>\n</androidx.constraintlayout.widget.ConstraintLayout>',MaterialDatePickerActivityKT:'package com.example\n\nimport android.os.Bundle\nimport android.widget.Button\nimport android.widget.TextView\nimport androidx.appcompat.app.AppCompatActivity\nimport com.google.android.material.datepicker.MaterialDatePicker\nimport java.text.SimpleDateFormat\nimport java.util.*\n\n\nclass MainActivity : AppCompatActivity() {\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_main)\n\n        // todo: Material date picker code\n        val materialDatePicker =\n            MaterialDatePicker.Builder.datePicker()\n                .setTitleText("Select Date")\n                //  .setSelection(MaterialDatePicker.todayInUtcMilliseconds())\n                .build()\n        materialDatePicker.addOnPositiveButtonClickListener {\n            val myFormat = "dd-MMM-yyyy" // mention the format you need\n            val sdf = SimpleDateFormat(myFormat, Locale.US)\n            findViewById<TextView>(R.id.dateTxt).text = sdf.format(materialDatePicker.selection)\n        }\n        findViewById<Button>(R.id.materialDatePickerBtn).setOnClickListener {\n            materialDatePicker.show(supportFragmentManager,"MATERIAL_DATE_PICKER")\n        }\n        // todo: Material date picker code\n    }\n\n}'}},function(t,n){t.exports={SimpleTimePickerActivityXMl:'<?xml version="1.0" encoding="utf-8"?>\n<androidx.constraintlayout.widget.ConstraintLayout \n    xmlns:android="http://schemas.android.com/apk/res/android"\n    xmlns:app="http://schemas.android.com/apk/res-auto"\n    xmlns:tools="http://schemas.android.com/tools"\n    android:layout_width="match_parent"\n    android:layout_height="match_parent"\n    tools:context=".MainActivity">\n\n    <LinearLayout\n        android:layout_width="match_parent"\n        android:layout_height="wrap_content"\n        android:orientation="vertical"\n        app:layout_constraintBottom_toBottomOf="parent"\n        app:layout_constraintEnd_toEndOf="parent"\n        app:layout_constraintStart_toStartOf="parent"\n        app:layout_constraintTop_toTopOf="parent">\n\n        <TextView\n            android:id="@+id/timeTxt"\n            android:layout_width="match_parent"\n            android:layout_height="wrap_content"\n            android:textAlignment="center"\n            android:textSize="16sp" />\n\n        <Button\n            android:id="@+id/simpleTimePickerBtn"\n            android:layout_width="match_parent"\n            android:layout_height="wrap_content"\n            android:layout_margin="8dp"\n            android:text="Simple Time Picker" />\n    </LinearLayout>\n</androidx.constraintlayout.widget.ConstraintLayout>',SimpleTimePickerActivityKT:'package com.example\n\nimport android.annotation.SuppressLint\nimport android.app.TimePickerDialog\nimport android.os.Bundle\nimport android.widget.Button\nimport android.widget.TextView\nimport androidx.appcompat.app.AppCompatActivity\nimport java.text.DecimalFormat\nimport java.text.NumberFormat\nimport java.util.*\n\n\nclass MainActivity : AppCompatActivity() {\n\n    @SuppressLint("SetTextI18n")\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_main)\n        \n        // todo: Simple time picker code\n        findViewById<TextView>(R.id.timeTxt).text = "--:--"\n        val mTimePicker: TimePickerDialog\n        val mCurrentTime = Calendar.getInstance()\n        val hour = mCurrentTime.get(Calendar.HOUR_OF_DAY)\n        val minutes = mCurrentTime.get(Calendar.MINUTE)\n\n        mTimePicker = TimePickerDialog(this,\n            { _, hourOfDay, minute ->\n                val modifiedHour = getHourAMPM(hourOfDay)\n                val pmAm = if (hourOfDay > 11) "PM" else "AM"\n                val f: NumberFormat = DecimalFormat("00")\n                findViewById<TextView>(R.id.timeTxt).text =\n                    f.format(modifiedHour).toString() + ":" + f.format(minute).toString() + pmAm\n\n            }, hour, minutes, false\n        )\n\n        findViewById<Button>(R.id.simpleTimePickerBtn).setOnClickListener {\n            mTimePicker.show()\n        }\n        // todo: Simple time picker code\n\n    }\n\n    private fun getHourAMPM(hour: Int): Int {\n        // Return the hour value for AM PM time format\n        var modifiedHour = if (hour > 11) hour - 12 else hour\n        if (modifiedHour == 0) {\n            modifiedHour = 12\n        }\n        return modifiedHour\n    }\n}'}},function(t,n){t.exports={MaterialTimePickerActivityXMl:'<?xml version="1.0" encoding="utf-8"?>\n<androidx.constraintlayout.widget.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"\n    xmlns:app="http://schemas.android.com/apk/res-auto"\n    xmlns:tools="http://schemas.android.com/tools"\n    android:layout_width="match_parent"\n    android:layout_height="match_parent"\n    tools:context=".MainActivity">\n\n    <LinearLayout\n        android:layout_width="match_parent"\n        android:layout_height="wrap_content"\n        android:orientation="vertical"\n        app:layout_constraintBottom_toBottomOf="parent"\n        app:layout_constraintEnd_toEndOf="parent"\n        app:layout_constraintStart_toStartOf="parent"\n        app:layout_constraintTop_toTopOf="parent">\n\n        <TextView\n            android:id="@+id/timeTxt"\n            android:layout_width="match_parent"\n            android:layout_height="wrap_content"\n            android:textAlignment="center"\n            android:textSize="16sp" />\n\n        <Button\n            android:id="@+id/materialTimePickerBtn"\n            android:layout_width="match_parent"\n            android:layout_height="wrap_content"\n            android:layout_margin="8dp"\n            android:text="Material Time Picker" />\n    </LinearLayout>\n</androidx.constraintlayout.widget.ConstraintLayout>',MaterialTimePickerActivityKT:'package com.example\n\nimport android.annotation.SuppressLint\nimport android.app.TimePickerDialog\nimport android.os.Bundle\nimport android.widget.Button\nimport android.widget.TextView\nimport androidx.appcompat.app.AppCompatActivity\nimport com.google.android.material.timepicker.MaterialTimePicker\nimport com.google.android.material.timepicker.TimeFormat\nimport java.text.DecimalFormat\nimport java.text.NumberFormat\nimport java.util.*\n\n\nclass MainActivity : AppCompatActivity() {\n\n    @SuppressLint("SetTextI18n")\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_main)\n        \n        // todo: Material time picker code\n        val materialTimePicker =\n            MaterialTimePicker.Builder()\n                .setTimeFormat(TimeFormat.CLOCK_12H)\n                .setTitleText("Select Time")\n                .build()\n        materialTimePicker.addOnPositiveButtonClickListener {\n            val pickedHour: Int = materialTimePicker.hour\n            val pickedMinute: Int = materialTimePicker.minute\n            val modifiedHour = getHourAMPM(pickedHour)\n            val f: NumberFormat = DecimalFormat("00")\n            val pmAm = if (pickedHour > 11) "PM" else "AM"\n            findViewById<TextView>(R.id.timeTxt).text =\n                f.format(modifiedHour).toString() + ":" + f.format(pickedMinute).toString() + pmAm\n        }\n        findViewById<Button>(R.id.materialTimePickerBtn).setOnClickListener {\n            materialTimePicker.show(supportFragmentManager, "MATERIAL_TIME_PICKER")\n        }\n        // todo: Material time picker code\n    }\n\n    private fun getHourAMPM(hour: Int): Int {\n        // Return the hour value for AM PM time format\n        var modifiedHour = if (hour > 11) hour - 12 else hour\n        if (modifiedHour == 0) {\n            modifiedHour = 12\n        }\n        return modifiedHour\n    }\n}'}},function(t,n){t.exports={DownloadAndroidMainfestXMl:'<?xml version="1.0" encoding="utf-8"?>\n<manifest xmlns:android="http://schemas.android.com/apk/res/android"\n    package="com.example">\n    <uses-permission android:name="android.permission.INTERNET"/>\n    <uses-permission android:name="android.permission.READ_EXTERNAL_STORAGE"/>\n    <uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE"/>\n    <application\n        android:allowBackup="true"\n        android:icon="@mipmap/ic_launcher"\n        android:label="@string/app_name"\n        android:roundIcon="@mipmap/ic_launcher_round"\n        android:supportsRtl="true"\n        android:theme="@style/Theme.AllExample">\n        <activity\n            android:name=".MainActivity"\n            android:exported="true" >\n            <intent-filter  >\n                <action android:name="android.intent.action.MAIN" />\n\n                <category android:name="android.intent.category.LAUNCHER" />\n            </intent-filter>\n        </activity>\n    </application>\n\n</manifest>',DownloadMainActivityXML:'<?xml version="1.0" encoding="utf-8"?>\n<androidx.constraintlayout.widget.ConstraintLayout \n    xmlns:android="http://schemas.android.com/apk/res/android"\n    xmlns:app="http://schemas.android.com/apk/res-auto"\n    xmlns:tools="http://schemas.android.com/tools"\n    android:layout_width="match_parent"\n    android:layout_height="match_parent"\n    tools:context=".MainActivity">\n\n    <com.google.android.material.textfield.TextInputLayout\n        android:id="@+id/textField"\n        style="@style/Widget.MaterialComponents.TextInputLayout.OutlinedBox"\n        android:layout_width="match_parent"\n        android:layout_height="wrap_content"\n        android:layout_marginStart="8dp"\n        android:layout_marginEnd="8dp"\n        android:hint="Enter the link"\n        app:layout_constraintBottom_toBottomOf="parent"\n        app:layout_constraintEnd_toEndOf="parent"\n        app:layout_constraintStart_toStartOf="parent"\n        app:layout_constraintTop_toTopOf="parent"\n        app:layout_constraintVertical_bias="0.40">\n\n        <com.google.android.material.textfield.TextInputEditText\n            android:id="@+id/edFileName"\n            android:layout_width="match_parent"\n            android:layout_height="wrap_content"\n            android:inputType="textUri"\n            tools:ignore="TextContrastCheck,TextContrastCheck" />\n\n    </com.google.android.material.textfield.TextInputLayout>\n\n    <Button\n        android:id="@+id/downloadBtn"\n        android:layout_width="wrap_content"\n        android:layout_height="wrap_content"\n        android:layout_marginTop="16dp"\n        android:text="download"\n        app:layout_constraintEnd_toEndOf="parent"\n        app:layout_constraintStart_toStartOf="parent"\n        app:layout_constraintTop_toBottomOf="@+id/textField" />\n\n</androidx.constraintlayout.widget.ConstraintLayout>',DownloadMainActivityKT:'package com.example\n\nimport android.Manifest\nimport android.app.Activity\nimport android.app.DownloadManager\nimport android.content.Context\nimport android.content.DialogInterface\nimport android.content.Intent\nimport android.content.pm.PackageManager\nimport android.net.Uri\nimport android.os.Bundle\nimport android.os.Environment\nimport android.provider.Settings\nimport android.widget.Button\nimport android.widget.EditText\nimport android.widget.Toast\nimport androidx.appcompat.app.AppCompatActivity\nimport androidx.core.app.ActivityCompat\nimport androidx.core.content.ContextCompat\nimport com.google.android.material.dialog.MaterialAlertDialogBuilder\n\nimport java.util.*\n\n\nclass MainActivity : AppCompatActivity() {\n    private val permissionsRequest: ArrayList<String> = arrayListOf(\n        Manifest.permission.READ_EXTERNAL_STORAGE,\n        Manifest.permission.WRITE_EXTERNAL_STORAGE\n    )\n    private val requestIdMultiplePermissions = 1\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_main)\n\n        val edFileName = findViewById<EditText>(R.id.edFileName)\n        findViewById<Button>(R.id.downloadBtn).setOnClickListener {\n            if (edFileName.text.toString().isNotEmpty()) {\n                if (checkMultipleRequestPermissions()) {\n                    doOperation()\n                    downloadFile(this, Uri.parse(edFileName.text.toString()))\n                }\n            } else {\n                edFileName.error = "Required"\n            }\n        }\n    }\n\n    private fun doOperation() {\n        Toast.makeText(this, "Successfully granted", Toast.LENGTH_LONG).show()\n    }\n\n    private fun checkMultipleRequestPermissions(): Boolean {\n        val listPermissionsNeeded: MutableList<String> = ArrayList()\n\n        for (p in permissionsRequest) {\n            val result = ContextCompat.checkSelfPermission(this, p)\n            if (result != PackageManager.PERMISSION_GRANTED) {\n                listPermissionsNeeded.add(p)\n            }\n        }\n\n        if (listPermissionsNeeded.isNotEmpty()) {\n            ActivityCompat.requestPermissions(\n                this,\n                listPermissionsNeeded.toTypedArray(),\n                requestIdMultiplePermissions\n            )\n            return false\n        }\n        return true\n    }\n\n    override fun onRequestPermissionsResult(\n        requestCode: Int,\n        permissions: Array<out String>,\n        grantResults: IntArray\n    ) {\n        super.onRequestPermissionsResult(requestCode, permissions, grantResults)\n        if (requestCode == requestIdMultiplePermissions) {\n            if (grantResults.isNotEmpty()) {\n                var isGrant = true\n                for (element in grantResults) {\n                    if (element == PackageManager.PERMISSION_DENIED) {\n                        isGrant = false\n                    }\n                }\n                if (isGrant) {\n                    doOperation()\n                } else {\n                    var someDenied = false\n                    for (permission in permissions) {\n                        if (!ActivityCompat.shouldShowRequestPermissionRationale(\n                                this,\n                                permission\n                            )\n                        ) {\n                            if (ActivityCompat.checkSelfPermission(\n                                    this,\n                                    permission\n                                ) == PackageManager.PERMISSION_DENIED\n                            ) {\n                                someDenied = true\n                            }\n                        }\n                    }\n                    if (someDenied) {\n                        settingActivityOpen(this)\n                    } else {\n                        showDialogOK(this) { _: DialogInterface?, which: Int ->\n                            when (which) {\n                                DialogInterface.BUTTON_POSITIVE -> checkMultipleRequestPermissions()\n                                DialogInterface.BUTTON_NEGATIVE -> {\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    private fun settingActivityOpen(activity: Activity) {\n        Toast.makeText(\n            activity,\n            "Go to settings and enable permissions",\n            Toast.LENGTH_LONG\n        )\n            .show()\n        val i = Intent()\n        i.action = Settings.ACTION_APPLICATION_DETAILS_SETTINGS\n        i.addCategory(Intent.CATEGORY_DEFAULT)\n        val packageName = activity.packageName\n        i.data = Uri.parse("package:$packageName")\n        i.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK)\n        i.addFlags(Intent.FLAG_ACTIVITY_NO_HISTORY)\n        i.addFlags(Intent.FLAG_ACTIVITY_EXCLUDE_FROM_RECENTS)\n        activity.startActivity(i)\n    }\n\n    private fun showDialogOK(activity: Activity, okListener: DialogInterface.OnClickListener) {\n        MaterialAlertDialogBuilder(activity)\n            .setMessage("All Permission required for this app")\n            .setPositiveButton("OK", okListener)\n            .setNegativeButton("Cancel", okListener)\n            .create()\n            .show()\n    }\n\n    private fun downloadFile(context: Context, url: Uri) {\n        val downloadManager = context.getSystemService(Context.DOWNLOAD_SERVICE) as DownloadManager\n        val request = DownloadManager.Request(url)\n        request.setAllowedNetworkTypes(DownloadManager.Request.NETWORK_MOBILE or DownloadManager.Request.NETWORK_WIFI)\n        request.setNotificationVisibility(DownloadManager.Request.VISIBILITY_VISIBLE_NOTIFY_COMPLETED)\n        request.setDestinationInExternalPublicDir(\n            Environment.DIRECTORY_DOWNLOADS,\n            url.lastPathSegment\n        )\n        downloadManager.enqueue(request)\n    }\n\n}'}},function(t,n){t.exports={SCPMainActivityXML:'<?xml version="1.0" encoding="utf-8"?>\n<androidx.constraintlayout.widget.ConstraintLayout \n    xmlns:android="http://schemas.android.com/apk/res/android"\n    xmlns:app="http://schemas.android.com/apk/res-auto"\n    xmlns:tools="http://schemas.android.com/tools"\n    android:layout_width="match_parent"\n    android:layout_height="match_parent"\n    tools:context=".MainActivity">\n\n    <com.google.android.material.textfield.TextInputLayout\n        android:id="@+id/textField"\n        style="@style/Widget.MaterialComponents.TextInputLayout.OutlinedBox"\n        android:layout_width="match_parent"\n        android:layout_height="wrap_content"\n        android:layout_marginStart="8dp"\n        android:layout_marginEnd="8dp"\n        android:hint="enter the text"\n        app:layout_constraintBottom_toBottomOf="parent"\n        app:layout_constraintEnd_toEndOf="parent"\n        app:layout_constraintStart_toStartOf="parent"\n        app:layout_constraintTop_toTopOf="parent"\n        app:layout_constraintVertical_bias="0.40">\n\n        <com.google.android.material.textfield.TextInputEditText\n            android:id="@+id/edFileName"\n            android:layout_width="match_parent"\n            android:layout_height="wrap_content"\n            android:inputType="textUri"\n            tools:ignore="TextContrastCheck" />\n\n    </com.google.android.material.textfield.TextInputLayout>\n\n    <LinearLayout\n        android:layout_width="match_parent"\n        android:layout_height="wrap_content"\n        android:orientation="horizontal"\n        app:layout_constraintEnd_toEndOf="parent"\n        app:layout_constraintStart_toStartOf="parent"\n        app:layout_constraintTop_toBottomOf="@+id/textField">\n\n        <Button\n            android:id="@+id/shareDataBtn"\n            style="?android:attr/buttonBarStyle"\n            android:layout_width="match_parent"\n            android:layout_height="match_parent"\n            android:layout_margin="8dp"\n            android:layout_weight="1"\n            android:text="share" />\n\n        <Button\n            android:id="@+id/copyDataBtn"\n            style="?android:attr/buttonBarStyle"\n            android:layout_width="match_parent"\n            android:layout_height="match_parent"\n            android:layout_margin="8dp"\n            android:layout_weight="1"\n            android:text="copy" />\n\n        <Button\n            android:id="@+id/pasteDataBtn"\n            style="?android:attr/buttonBarStyle"\n            android:layout_width="match_parent"\n            android:layout_height="match_parent"\n            android:layout_margin="8dp"\n            android:layout_weight="1"\n            android:text="paste" />\n\n    </LinearLayout>\n</androidx.constraintlayout.widget.ConstraintLayout>',SCPMainActivityKT:'package com.example\n\n\nimport android.content.ClipData\nimport android.content.ClipboardManager\nimport android.content.Context\nimport android.content.Intent\nimport android.os.Bundle\nimport android.widget.Button\nimport android.widget.EditText\nimport android.widget.Toast\nimport androidx.appcompat.app.AppCompatActivity\n\n\nclass MainActivity : AppCompatActivity() {\n    private lateinit var edFileName: EditText\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_main)\n        edFileName = findViewById(R.id.edFileName)\n\n        // todo: share text\n        findViewById<Button>(R.id.shareDataBtn).setOnClickListener {\n            if (edFileName.text.isNotEmpty()) {\n                shareText(this, edFileName.text.toString())\n            } else {\n                edFileName.error = "Required for share and copy"\n            }\n        }\n        // todo: share text\n\n        // todo: copy text\n        findViewById<Button>(R.id.copyDataBtn).setOnClickListener {\n            if (edFileName.text.isNotEmpty()) {\n                copyToClipBoard(\n                    this,\n                    edFileName.text.toString()\n                )\n                Toast.makeText(this, "copied", Toast.LENGTH_LONG).show()\n            } else {\n                edFileName.error = "Required for share and copy"\n            }\n        }\n        // todo: copy text\n\n        // todo: paste text\n        findViewById<Button>(R.id.pasteDataBtn).setOnClickListener {\n            edFileName.setText(pasteFromClipBoard(this))\n            Toast.makeText(this, "Pasted", Toast.LENGTH_LONG).show()\n        }\n        // todo: paste text\n\n    }\n\n    private fun copyToClipBoard(context: Context, text: String) {\n        val clipboard = context.getSystemService(CLIPBOARD_SERVICE) as ClipboardManager\n        val clip = ClipData.newPlainText("Copied Text", text)\n        clipboard.setPrimaryClip(clip)\n    }\n\n    private fun shareText(context: Context, text: String) {\n        val intent = Intent(Intent.ACTION_SEND)\n        intent.type = "text/plain"\n        intent.putExtra(Intent.EXTRA_TEXT, text)\n        context.startActivity(Intent.createChooser(intent, "Share"))\n    }\n\n    private fun pasteFromClipBoard(context: Context): String {\n        val clipboard = context.getSystemService(CLIPBOARD_SERVICE) as ClipboardManager\n        return clipboard.primaryClip!!.getItemAt(0).text.toString()\n    }\n}'}},function(t,n){t.exports={SBMActivityXML:'<?xml version="1.0" encoding="utf-8"?>\n<androidx.constraintlayout.widget.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"\n    xmlns:app="http://schemas.android.com/apk/res-auto"\n    xmlns:tools="http://schemas.android.com/tools"\n    android:layout_width="match_parent"\n    android:layout_height="match_parent"\n    tools:context=".MainActivity">\n\n    <androidx.recyclerview.widget.RecyclerView\n        android:layout_width="match_parent"\n        android:layout_height="wrap_content"\n        tools:listitem="@layout/item_layout"\n        android:id="@+id/recycler_view"\n        app:layoutManager="androidx.recyclerview.widget.LinearLayoutManager"\n        android:orientation="vertical"\n        app:layout_constraintLeft_toLeftOf="parent"\n        app:layout_constraintRight_toRightOf="parent"\n        app:layout_constraintTop_toTopOf="parent" />\n</androidx.constraintlayout.widget.ConstraintLayout>',SBMenuXML:'<?xml version="1.0" encoding="utf-8"?>\n<menu xmlns:android="http://schemas.android.com/apk/res/android"\n    xmlns:app="http://schemas.android.com/apk/res-auto">\n    <item\n        android:id="@+id/app_bar_search"\n        android:icon="@drawable/ic_search_black_24dp"\n        android:title="Search"\n        app:showAsAction="ifRoom|withText"\n        app:actionViewClass="androidx.appcompat.widget.SearchView"/>\n</menu>',item_layout:'<?xml version="1.0" encoding="utf-8"?>\n<androidx.constraintlayout.widget.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"\n    xmlns:app="http://schemas.android.com/apk/res-auto"\n    android:layout_width="match_parent"\n    android:layout_height="wrap_content"\n    android:layout_margin="4dp"\n    android:background="?attr/selectableItemBackground"\n    android:elevation="6dp">\n\n    <androidx.cardview.widget.CardView\n        android:id="@+id/cardview"\n        android:layout_width="0dp"\n        android:layout_height="wrap_content"\n        android:layout_alignParentEnd="true"\n        app:cardCornerRadius="5dp"\n        app:cardUseCompatPadding="true"\n        app:layout_constraintBottom_toBottomOf="parent"\n        app:layout_constraintEnd_toEndOf="parent"\n        app:layout_constraintStart_toStartOf="parent"\n        app:layout_constraintTop_toTopOf="parent">\n\n        <LinearLayout\n            android:id="@+id/layout_click"\n            android:layout_width="match_parent"\n            android:layout_height="wrap_content"\n            app:layout_constraintEnd_toEndOf="parent"\n            app:layout_constraintStart_toStartOf="parent"\n            app:layout_constraintTop_toTopOf="parent">\n\n            <TextView\n                android:id="@+id/srNo"\n                android:layout_width="wrap_content"\n                android:layout_height="wrap_content"\n                android:padding="8dp"\n                android:text="sr No"\n                android:textSize="16sp"\n                android:textStyle="bold" />\n\n            <TextView\n                android:id="@+id/part_name"\n                android:layout_width="0dp"\n                android:layout_height="wrap_content"\n                android:layout_weight="1"\n                android:padding="8dp"\n                android:text="enter the name"\n                android:textSize="16sp"\n                android:textStyle="bold" />\n\n        </LinearLayout>\n    </androidx.cardview.widget.CardView>\n\n</androidx.constraintlayout.widget.ConstraintLayout>',item_model:"package com.example\n\nclass ItemModel(private var name:String) {\n\n    fun setName(name: String) {\n        this.name = name\n    }\n    fun getName():String{\n        return name\n    }\n}",item_adapter:"package com.example\n\nimport android.view.LayoutInflater\nimport android.view.View\nimport android.view.ViewGroup\nimport android.widget.TextView\nimport androidx.recyclerview.widget.RecyclerView\nimport java.util.ArrayList\n\nclass ItemAdapter(private var itemList: ArrayList<ItemModel>) :\n    RecyclerView.Adapter<ItemAdapter.ViewHolder>() {\n\n\n    class ViewHolder(ItemView: View) : RecyclerView.ViewHolder(ItemView) {\n        val srNo: TextView = itemView.findViewById(R.id.srNo)\n        val nameTxt: TextView = itemView.findViewById(R.id.part_name)\n   }\n\n    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): ViewHolder {\n        val view: View =\n            LayoutInflater.from(parent.context).inflate(R.layout.item_layout, parent, false)\n        return ViewHolder(view)\n    }\n\n    override fun onBindViewHolder(holder: ViewHolder, position: Int) {\n        holder.srNo.text = (position + 1).toString()\n        holder.nameTxt.text = itemList[position].getName()\n    }\n\n    override fun getItemCount(): Int {\n        return itemList.size\n    }\n}",SBMActivityKIT:'package com.example\n\n\nimport android.annotation.SuppressLint\nimport android.os.Bundle\nimport android.view.Menu\nimport androidx.appcompat.app.AppCompatActivity\nimport androidx.appcompat.widget.SearchView\nimport androidx.recyclerview.widget.RecyclerView\nimport java.util.*\nimport kotlin.collections.ArrayList\n\n\nclass MainActivity : AppCompatActivity() {\n    private lateinit var arrayList: ArrayList<ItemModel>\n    private lateinit var adapter: ItemAdapter\n    private lateinit var recyclerView: RecyclerView\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_main)\n\n        recyclerView = findViewById(R.id.recycler_view)\n        arrayList = ArrayList()\n        arrayList.add(ItemModel("Meet"))\n        arrayList.add(ItemModel("Ankit"))\n        arrayList.add(ItemModel("Rushil"))\n        arrayList.add(ItemModel("Abhishek"))\n        arrayList.add(ItemModel("Modi"))\n        arrayList.add(ItemModel("Ghree"))\n        arrayList.add(ItemModel("Kirtan"))\n        arrayList.add(ItemModel("Ankita"))\n        arrayList.add(ItemModel("Soham"))\n        arrayList.add(ItemModel("Ganesh"))\n        arrayList.add(ItemModel("Dixit"))\n        arrayList.add(ItemModel("Ankash"))\n        arrayList.add(ItemModel("Parth"))\n        arrayList.add(ItemModel("Pranav"))\n        arrayList.add(ItemModel("Ankit Sir"))\n        arrayList.add(ItemModel("Priya Mem"))\n        arrayList.add(ItemModel("Jinal Mem"))\n        arrayList.add(ItemModel("Bhumi"))\n        arrayList.add(ItemModel("Nidhi"))\n        arrayList.add(ItemModel("Hardik"))\n        arrayList.add(ItemModel("Mayank"))\n        arrayList.add(ItemModel("Kaushik"))\n        arrayList.add(ItemModel("Rinku"))\n        arrayList.add(ItemModel("Mom"))\n        adapter = ItemAdapter(arrayList)\n\n        recyclerView.adapter = adapter\n    }\n\n    override fun onCreateOptionsMenu(menu: Menu): Boolean {\n        menuInflater.inflate(R.menu.search_menu, menu)\n        val search = menu.findItem(R.id.app_bar_search)\n\n        val searchView = search.actionView as SearchView\n        searchView.maxWidth = android.R.attr.width\n        searchView.queryHint = "Search"\n        searchView.setOnQueryTextListener(object : SearchView.OnQueryTextListener {\n            override fun onQueryTextSubmit(query: String?): Boolean {\n                return false\n            }\n\n            @SuppressLint("NotifyDataSetChanged")\n            override fun onQueryTextChange(newText: String?): Boolean {\n                val checkItemModelArrayList: ArrayList<ItemModel> = ArrayList()\n\n                for (i in arrayList) {\n                    if (i.getName().lowercase(Locale.getDefault()).contains(\n                            newText!!.lowercase(Locale.getDefault())\n                        )\n                    ) {\n                        checkItemModelArrayList.add(i)\n                    }\n                }\n                adapter = ItemAdapter(checkItemModelArrayList)\n\n                recyclerView.adapter = adapter\n                adapter.notifyDataSetChanged()\n                return true\n            }\n        })\n\n        return super.onCreateOptionsMenu(menu)\n    }\n}'}},,,,,,,,,,,,function(t,n,e){"use strict";e.r(n);var a=e(1),i=e.n(a),o=e(23),r=e.n(o),d=(e(32),e(13)),s=e(7),l=e(2),p=e(8),c=e(0);function m(){return Object(c.jsxs)("div",{className:"container my-2",children:[Object(c.jsx)("h2",{className:"text-center",children:"Component"}),Object(c.jsx)("div",{className:"row row-cols-1 row-cols-md-2 g-4",children:p.sourceCodeList.map((function(t,n){return t.type?Object(c.jsx)(c.Fragment,{children:t.subs.map((function(t,n){return Object(c.jsx)("div",{children:Object(c.jsxs)("div",{className:"card text-center border-dark h-100",children:[Object(c.jsx)("h5",{className:"card-header",children:t.component_name}),Object(c.jsxs)("div",{className:"card-body",children:[Object(c.jsx)("p",{className:"card-text",children:t.description}),Object(c.jsx)(s.b,{to:t.path,className:"btn btn-primary",children:"Read More"})]})]})},n)}))}):Object(c.jsx)("div",{children:Object(c.jsxs)("div",{className:"card text-center border-dark h-100",children:[Object(c.jsx)("h5",{className:"card-header",children:t.component_name}),Object(c.jsxs)("div",{className:"card-body",children:[Object(c.jsx)("p",{className:"card-text",children:t.description}),Object(c.jsx)(s.b,{to:t.path,className:"btn btn-primary",children:"Read More"})]})]})},n)}))})]})}var u=e.p+"static/media/logo.6ce24c58.svg";function y(t){var n=Object(l.f)(),e=Object(a.useState)([]),i=Object(d.a)(e,2),o=i[0],r=i[1],m=Object(a.useState)(""),y=Object(d.a)(m,2),h=y[0],g=y[1],_=function(){r([]),g("")};return Object(c.jsx)("div",{className:"row sticky-top",children:Object(c.jsxs)("nav",{className:"navbar navbar-expand-lg navbar-dark bg-dark",children:[Object(c.jsx)("button",{className:"btn mx-3",style:{backgroundColor:"dark",color:"white",fontSize:"22px"},onClick:t.showSidebar,children:Object(c.jsx)("i",{className:"fa fa-bars "})}),Object(c.jsxs)("div",{className:"container",children:[Object(c.jsxs)(s.b,{className:"h3 fw-bold font-monospace text-decoration-none ",style:{color:"white"},to:"/",children:[Object(c.jsx)("img",{src:u,alt:"cin",height:"30px"}),"Android Addict"]}),Object(c.jsx)("form",{className:"d-flex",style:{float:"right"},children:Object(c.jsxs)("div",{className:"container",children:[Object(c.jsx)("input",{className:"form-control me-2",type:"search",placeholder:"Search","aria-label":"Search",value:h,onChange:function(t){var n=t.target.value;g(n);var e=[];p.sourceCodeList.forEach((function(t,n){t.type?t.subs.forEach((function(t,n){e.push(t)})):e.push(t)}));var a=e.filter((function(t){return t.component_name.toLowerCase().includes(n.toLowerCase())}));r(""===n?[]:a)}}),o.length>0&&Object(c.jsx)("div",{className:"searchInputs",style:{position:"absolute",backgroundColor:"black",width:"220px"},children:o.map((function(t,e){return Object(c.jsx)(s.b,{to:t.path,className:"nav-link ".concat(n.pathname===t.path?"bg-dark":"text-white"),onClick:_,children:t.component_name})}))})]})})]})]})})}function h(){var t=Object(l.f)();return Object(c.jsx)(c.Fragment,{children:Object(c.jsx)("div",{className:"p-2 text-white fixed sideColor",style:{width:"240px",height:"100%",position:" fixed",zIndex:"1",overflowX:"hidden"},children:Object(c.jsx)("ul",{className:"nav nav-pills flex-column mb-auto mx-2",style:{paddingBottom:"100px"},children:p.sourceCodeList.map((function(n,e){return n.type?Object(c.jsxs)(c.Fragment,{children:[Object(c.jsxs)("button",{className:"btn nav-item text-start collapsed text-white my-2","data-bs-toggle":"collapse","data-bs-target":"#".concat(n.typeId,"-collapse"),"aria-expanded":"true",children:[n.typeName,Object(c.jsx)("i",{className:"bi bi-caret-down-fill pull-right"})]}),Object(c.jsx)("div",{className:"collapse",id:"".concat(n.typeId,"-collapse"),children:Object(c.jsx)("ul",{className:"btn-toggle-nav list-group",style:{listStyle:"none"},children:n.subs.map((function(n,e){return Object(c.jsx)("li",{className:"nav-item mb-2",children:Object(c.jsxs)(s.b,{to:n.path,className:"nav-link ".concat(t.pathname===n.path?"active bg-dark":"text-white"),children:[Object(c.jsx)("i",{class:"bi bi-caret-right-fill"}),n.component_name]},e)})}))})})]}):Object(c.jsx)("li",{className:"nav-item mb-3",children:Object(c.jsx)(s.b,{to:n.path,className:"nav-link ".concat(t.pathname===n.path?"active bg-dark":"text-white"),children:n.component_name},e)})}))})})})}var g,_,x,v,f=e(10),w=e(14),A=e(15),T=e(21),C=e(27);function I(t){var n=t.fileCode,e=A.a.pre(g||(g=Object(w.a)(["\n      text-align: left;\n      margin: 1em 0;\n      padding: 0.5em;\n      overflow: scroll;\n    \n      & .token-line {\n        line-height: 1.3em;\n        height: 1.3em;\n      }\n    "]))),a=A.a.div(_||(_=Object(w.a)(["\n      display: table-row;\n    "]))),i=A.a.span(x||(x=Object(w.a)(["\n      display: table-cell;\n      text-align: right;\n      padding-right: 1em;\n      user-select: none;\n      opacity: 0.5;\n    "]))),o=A.a.span(v||(v=Object(w.a)(["\n      display: table-cell;\n    "])));return Object(c.jsxs)(c.Fragment,{children:[Object(c.jsxs)("h5",{children:[t.fileName,":"]}),Object(c.jsx)(T.a,Object(f.a)(Object(f.a)({},T.b),{},{theme:C.a,code:t.fileCode,language:t.fileType,children:function(t){var r=t.className,d=t.style,s=t.tokens,l=t.getLineProps,p=t.getTokenProps;return Object(c.jsxs)(e,{className:r,style:d,children:[Object(c.jsx)("button",{className:"pull-right",onClick:function(){navigator.clipboard.writeText(n)},children:"Copy"}),s.map((function(t,n){return Object(c.jsxs)(a,Object(f.a)(Object(f.a)({},l({line:t,key:n})),{},{children:[Object(c.jsx)(i,{children:n+1}),Object(c.jsx)(o,{children:t.map((function(t,n){return Object(c.jsx)("span",Object(f.a)({},p({token:t,key:n})),n)}))})]}),n)}))]})}}))]})}function L(t){var n=t.element;return Object(c.jsxs)("div",{className:"container my-4",children:[Object(c.jsx)("h2",{children:Object(c.jsxs)("b",{children:[n.component_name,":"]})}),null!==n.description&&Object(c.jsx)("h6",{children:n.description}),null!==n.youtube_short_url&&Object(c.jsx)("iframe",{title:n.component_name,width:"100%",style:{height:"75vh"},src:n.youtube_short_url}),n.fileCode.length>0&&n.fileCode.map((function(t,e){return Object(c.jsx)(I,{fileType:n.fileType[e],fileName:n.fileName[e],fileCode:t})})),Object(c.jsx)("h3",{children:"Video:"}),null===n.youtube_url?Object(c.jsx)("h5",{children:"Coming Soon"}):Object(c.jsx)("iframe",{title:n.component_name,width:"100%",style:{height:"75vh"},frameBorder:"0",allow:"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture",allowFullScreen:!0,src:n.youtube_url})]})}var k=function(){var t=Object(a.useState)(!1),n=Object(d.a)(t,2),e=n[0],i=n[1];return Object(c.jsx)(c.Fragment,{children:Object(c.jsxs)(s.a,{basename:"/",children:[Object(c.jsx)(y,{showSidebar:function(){i(!e)}}),Object(c.jsxs)("div",{className:"row",children:[e&&Object(c.jsx)("div",{className:"col-2",children:Object(c.jsx)(h,{})}),Object(c.jsx)("div",{className:"col-".concat(e?"10":"12"),children:Object(c.jsxs)(l.c,{children:[p.sourceCodeList.map((function(t,n){return t.type?t.subs.map((function(t,e){return Object(c.jsx)(l.a,{path:t.path,children:Object(c.jsx)(L,{element:t},n)})})):Object(c.jsx)(l.a,{path:t.path,children:Object(c.jsx)(L,{element:t},n)})})),Object(c.jsx)(l.a,{exact:!0,path:"/",children:Object(c.jsx)(m,{})})]})})]})]})})};r.a.render(Object(c.jsx)(i.a.StrictMode,{children:Object(c.jsx)(k,{})}),document.getElementById("root"))}],[[56,1,2]]]);
//# sourceMappingURL=main.f3915a9f.chunk.js.map